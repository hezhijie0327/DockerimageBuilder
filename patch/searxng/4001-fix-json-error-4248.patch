diff --git a/searx/result_types/_base.py b/searx/result_types/_base.py
index 6d9a4994317..1496cbd2c91 100644
--- a/searx/result_types/_base.py
+++ b/searx/result_types/_base.py
@@ -110,6 +110,28 @@ def __iter__(self):
 
         return iter(self.__struct_fields__)
 
+    def as_dict(self):
+        return {f: getattr(self, f) for f in self.__struct_fields__}
+
+
+class MainResult(Result):  # pylint: disable=missing-class-docstring
+
+    # open_group and close_group should not manged in the Result class (we should rop it from here!)
+    open_group: bool = False
+    close_group: bool = False
+
+    title: str = ""
+    """Link title of the result item."""
+
+    content: str = ""
+    """Extract or description of the result item"""
+
+    img_src: str = ""
+    """URL of a image that is displayed in the result item."""
+
+    thumbnail: str = ""
+    """URL of a thumbnail that is displayed in the result item."""
+
 
 class LegacyResult(dict):
     """A wrapper around a legacy result item.  The SearXNG core uses this class
@@ -130,10 +152,12 @@ class LegacyResult(dict):
     UNSET = object()
     WHITESPACE_REGEX = re.compile('( |\t|\n)+', re.M | re.U)
 
+    def as_dict(self):
+        return self
+
     def __init__(self, *args, **kwargs):
 
         super().__init__(*args, **kwargs)
-        self.__dict__ = self
 
         # Init fields with defaults / compare with defaults of the fields in class Result
         self.engine = self.get("engine", "")
diff --git a/searx/templates/simple/result_templates/key-value.html b/searx/templates/simple/result_templates/key-value.html
index cb7f829ee32..dcab4377f98 100644
--- a/searx/templates/simple/result_templates/key-value.html
+++ b/searx/templates/simple/result_templates/key-value.html
@@ -1,6 +1,6 @@
 <table>
     {% for key, value in result.items() %}
-    {% if key in ['engine', 'engines', 'template', 'score', 'category', 'positions', 'pretty_url', 'parsed_url'] %}
+    {% if key in ['engine', 'engines', 'template', 'score', 'category', 'positions', 'parsed_url'] %}
         {% continue %}
     {% endif %}
     <tr>
diff --git a/searx/webapp.py b/searx/webapp.py
index c3ce073028d..9d51b5e8c50 100755
--- a/searx/webapp.py
+++ b/searx/webapp.py
@@ -694,9 +694,7 @@ def search():
             if 'title' in result and result['title']:
                 result['title'] = highlight_content(escape(result['title'] or ''), search_query.query)
 
-        if 'url' in result:
-            result['pretty_url'] = webutils.prettify_url(result['url'])
-        if result.get('publishedDate'):  # do not try to get a date from an empty string or a None type
+        if getattr(result, 'publishedDate', None):  # do not try to get a date from an empty string or a None type
             try:  # test if publishedDate >= 1900 (datetime module bug)
                 result['pubdate'] = result['publishedDate'].strftime('%Y-%m-%d %H:%M:%S%z')
             except ValueError:
@@ -706,15 +704,15 @@ def search():
 
         # set result['open_group'] = True when the template changes from the previous result
         # set result['close_group'] = True when the template changes on the next result
-        if current_template != result.get('template'):
-            result['open_group'] = True
+        if current_template != result.template:
+            result.open_group = True
             if previous_result:
-                previous_result['close_group'] = True  # pylint: disable=unsupported-assignment-operation
-        current_template = result.get('template')
+                previous_result.close_group = True  # pylint: disable=unsupported-assignment-operation
+        current_template = result.template
         previous_result = result
 
     if previous_result:
-        previous_result['close_group'] = True
+        previous_result.close_group = True
 
     # 4.a RSS
 
diff --git a/searx/webutils.py b/searx/webutils.py
index c58b981f6e5..6e49e38303a 100644
--- a/searx/webutils.py
+++ b/searx/webutils.py
@@ -123,17 +123,18 @@ def write_csv_response(csv: CSVWriter, rc: ResultContainer) -> None:  # pylint:
 
     """
 
-    results = rc.get_ordered_results()
     keys = ('title', 'url', 'content', 'host', 'engine', 'score', 'type')
     csv.writerow(keys)
 
-    for row in results:
+    for res in rc.get_ordered_results():
+        row = res.as_dict()
         row['host'] = row['parsed_url'].netloc
         row['type'] = 'result'
         csv.writerow([row.get(key, '') for key in keys])
 
     for a in rc.answers:
-        row = {'title': a, 'type': 'answer'}
+        row = a.as_dict()
+        row['host'] = row['parsed_url'].netloc
         csv.writerow([row.get(key, '') for key in keys])
 
     for a in rc.suggestions:
@@ -158,18 +159,17 @@ def default(self, o):
 
 def get_json_response(sq: SearchQuery, rc: ResultContainer) -> str:
     """Returns the JSON string of the results to a query (``application/json``)"""
-    results = rc.number_of_results
-    x = {
+    data = {
         'query': sq.query,
-        'number_of_results': results,
-        'results': rc.get_ordered_results(),
-        'answers': list(rc.answers),
+        'number_of_results': rc.number_of_results,
+        'results': [_.as_dict() for _ in rc.get_ordered_results()],
+        'answers': [_.as_dict() for _ in rc.answers],
         'corrections': list(rc.corrections),
         'infoboxes': rc.infoboxes,
         'suggestions': list(rc.suggestions),
         'unresponsive_engines': get_translated_errors(rc.unresponsive_engines),
     }
-    response = json.dumps(x, cls=JSONEncoder)
+    response = json.dumps(data, cls=JSONEncoder)
     return response
 
 
diff --git a/tests/unit/test_webapp.py b/tests/unit/test_webapp.py
index 12c86e4f0ac..e8f4fcdcdae 100644
--- a/tests/unit/test_webapp.py
+++ b/tests/unit/test_webapp.py
@@ -2,13 +2,13 @@
 # pylint: disable=missing-module-docstring,disable=missing-class-docstring,invalid-name
 
 import json
-from urllib.parse import ParseResult
 import babel
 from mock import Mock
 
 import searx.webapp
 import searx.search
 import searx.search.processors
+from searx.result_types._base import MainResult
 
 from searx.results import Timing
 from searx.preferences import Preferences
@@ -31,30 +31,21 @@ def dummy(*args, **kwargs):  # pylint: disable=unused-argument
 
         # set some defaults
         test_results = [
-            {
-                'content': 'first test content',
-                'title': 'First Test',
-                'url': 'http://first.test.xyz',
-                'engines': ['youtube', 'startpage'],
-                'engine': 'startpage',
-                'parsed_url': ParseResult(
-                    scheme='http', netloc='first.test.xyz', path='/', params='', query='', fragment=''
-                ),
-                'template': 'default.html',
-            },
-            {
-                'content': 'second test content',
-                'title': 'Second Test',
-                'url': 'http://second.test.xyz',
-                'engines': ['youtube', 'startpage'],
-                'engine': 'youtube',
-                'parsed_url': ParseResult(
-                    scheme='http', netloc='second.test.xyz', path='/', params='', query='', fragment=''
-                ),
-                'template': 'default.html',
-            },
+            MainResult(
+                title="First Test",
+                url="http://first.test.xyz",
+                content="first test content",
+                engine="startpage",
+            ),
+            MainResult(
+                title="Second Test",
+                url="http://second.test.xyz",
+                content="second test content",
+                engine="youtube",
+            ),
         ]
-
+        for r in test_results:
+            r.normalize_result_fields()
         timings = [
             Timing(engine='startpage', total=0.8, load=0.7),
             Timing(engine='youtube', total=0.9, load=0.6),
