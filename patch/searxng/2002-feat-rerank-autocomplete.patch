diff --git a/requirements.txt b/requirements.txt
index 533fa3edb64..7297efb9145 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -19,3 +19,6 @@ tomli==2.0.2; python_version < '3.11'
 msgspec==0.19.0
 typer-slim==0.15.1
 isodate==0.7.2
+bm25s==0.2.7.post1
+numpy==2.2.2
+scipy==1.15.1
diff --git a/searx/autocomplete.py b/searx/autocomplete.py
index 32a2bf188df..3bfcc1cf32a 100644
--- a/searx/autocomplete.py
+++ b/searx/autocomplete.py
@@ -19,6 +19,9 @@
 from searx.network import get as http_get, post as http_post
 from searx.exceptions import SearxEngineResponseException
 
+import bm25s
+import bm25s.stopwords as stopwords_module
+
 
 def update_kwargs(**kwargs):
     if 'timeout' not in kwargs:
@@ -266,14 +269,77 @@ def yandex(query, _lang):
     'swisscows': swisscows,
     'wikipedia': wikipedia,
     'yandex': yandex,
+    'all': 'all',
+    'custom': 'custom',
 }
 
 
+def deduplicate_results(results):
+    seen = set()
+    unique_results = []
+    for result in results:
+        if result not in seen:
+            unique_results.append(result)
+            seen.add(result)
+    return unique_results
+
+
+def rerank_results(results_list, query):
+    corpus = deduplicate_results([result for results in results_list for result in results])
+
+    stopwords = {
+        word for name, value in stopwords_module.__dict__.items()
+        if name.startswith("STOPWORDS_") and isinstance(value, tuple) for word in value
+    }
+
+    corpus_tokens = bm25s.tokenize(corpus, stopwords=stopwords)
+    query_tokens = bm25s.tokenize(query, stopwords=stopwords)
+
+    retriever = bm25s.BM25()
+    retriever.index(corpus_tokens)
+
+    documents, scores = retriever.retrieve(query_tokens, k=len(corpus), return_as='tuple', show_progress=False)
+
+    ranked_results = [
+        corpus[index] for index, _ in sorted(zip(documents[0], scores[0]), key=lambda x: x[1], reverse=True)
+    ]
+
+    return ranked_results
+
+
 def search_autocomplete(backend_name, query, sxng_locale):
-    backend = backends.get(backend_name)
-    if backend is None:
-        return []
-    try:
-        return backend(query, sxng_locale)
-    except (HTTPError, SearxEngineResponseException):
-        return []
+    excluded_backends = ['all', 'custom']
+
+    if backend_name == 'all':
+        results_list = []
+        for backend_key, backend in backends.items():
+            if backend_key not in excluded_backends:
+                try:
+                    results_list.append(backend(query, sxng_locale))
+                except (HTTPError, SearxEngineResponseException, ValueError):
+                    results_list.append([])
+        return rerank_results(results_list, query)
+
+    elif backend_name == 'custom':
+        custom_backends = settings.get('search', {}).get('autocomplete_engines', [])
+
+        custom_backends = [backend.strip() for backend in custom_backends if backend.strip() in backends]
+
+        results_list = []
+        for backend_key in custom_backends:
+            backend = backends.get(backend_key)
+            if backend is not None:
+                try:
+                    results_list.append(backend(query, sxng_locale))
+                except (HTTPError, SearxEngineResponseException, ValueError):
+                    results_list.append([])
+        return rerank_results(results_list, query)
+
+    else:
+        backend = backends.get(backend_name)
+        if backend is None:
+            return []
+        try:
+            return backend(query, sxng_locale)
+        except (HTTPError, SearxEngineResponseException, ValueError):
+            return []
diff --git a/searx/settings_defaults.py b/searx/settings_defaults.py
index b70aaf941b4..722598a23f1 100644
--- a/searx/settings_defaults.py
+++ b/searx/settings_defaults.py
@@ -156,6 +156,7 @@ def apply_schema(settings, schema, path_list):
     'search': {
         'safe_search': SettingsValue((0, 1, 2), 0),
         'autocomplete': SettingsValue(str, ''),
+        'autocomplete_engines': SettingsValue((list, str, False), ['']),
         'autocomplete_min': SettingsValue(int, 4),
         'favicon_resolver': SettingsValue(str, ''),
         'default_lang': SettingsValue(tuple(SXNG_LOCALE_TAGS + ['']), ''),
