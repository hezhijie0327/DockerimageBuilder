diff --git a/searx/autocomplete.py b/searx/autocomplete.py
index 09589cf1f68..9d9c21df039 100644
--- a/searx/autocomplete.py
+++ b/searx/autocomplete.py
@@ -19,6 +19,8 @@
 from searx.network import get as http_get, post as http_post
 from searx.exceptions import SearxEngineResponseException
 
+import random
+
 
 def update_kwargs(**kwargs):
     if 'timeout' not in kwargs:
@@ -250,14 +252,77 @@ def yandex(query, _lang):
     'wikipedia': wikipedia,
     'brave': brave,
     'yandex': yandex,
+    'all': 'all',
+    'custom': 'custom',
+    'random': 'random',
 }
 
 
+def deduplicate_results(results):
+    seen = set()
+    unique_results = []
+    for result in results:
+        if result not in seen:
+            unique_results.append(result)
+            seen.add(result)
+    return unique_results
+
+
+def interleave_results(results_list):
+    min_len = min(len(results) for results in results_list)
+    interleaved = []
+
+    for i in range(min_len):
+        for results in results_list:
+            interleaved.append(results[i])
+
+    for results in results_list:
+        interleaved.extend(results[min_len:])
+
+    return deduplicate_results(interleaved)
+
+
 def search_autocomplete(backend_name, query, sxng_locale):
-    backend = backends.get(backend_name)
-    if backend is None:
-        return []
-    try:
-        return backend(query, sxng_locale)
-    except (HTTPError, SearxEngineResponseException):
-        return []
+    excluded_backends = ['all', 'custom', 'random']
+
+    if backend_name == 'all':
+        results_list = []
+        for backend_key, backend in backends.items():
+            if backend_key not in excluded_backends:
+                try:
+                    results_list.append(backend(query, sxng_locale))
+                except (HTTPError, SearxEngineResponseException, ValueError):
+                    results_list.append([])
+        return interleave_results(results_list)
+
+    elif backend_name == 'random':
+        available_backends = {key: backend for key, backend in backends.items() if key not in excluded_backends}
+        backend = random.choice(list(available_backends.values()))
+        try:
+            return backend(query, sxng_locale)
+        except (HTTPError, SearxEngineResponseException, ValueError):
+            return []
+
+    elif backend_name == 'custom':
+        custom_backends = settings.get('search', {}).get('autocomplete_engines', [])
+
+        custom_backends = [backend.strip() for backend in custom_backends if backend.strip() in backends]
+
+        results_list = []
+        for backend_key in custom_backends:
+            backend = backends.get(backend_key)
+            if backend is not None:
+                try:
+                    results_list.append(backend(query, sxng_locale))
+                except (HTTPError, SearxEngineResponseException, ValueError):
+                    results_list.append([])
+        return interleave_results(results_list)
+
+    else:
+        backend = backends.get(backend_name)
+        if backend is None:
+            return []
+        try:
+            return backend(query, sxng_locale)
+        except (HTTPError, SearxEngineResponseException, ValueError):
+            return []
diff --git a/searx/settings_defaults.py b/searx/settings_defaults.py
index b70aaf941b4..722598a23f1 100644
--- a/searx/settings_defaults.py
+++ b/searx/settings_defaults.py
@@ -156,6 +156,7 @@ def apply_schema(settings, schema, path_list):
     'search': {
         'safe_search': SettingsValue((0, 1, 2), 0),
         'autocomplete': SettingsValue(str, ''),
+        'autocomplete_engines': SettingsValue((list, str, False), ['']),
         'autocomplete_min': SettingsValue(int, 4),
         'favicon_resolver': SettingsValue(str, ''),
         'default_lang': SettingsValue(tuple(SXNG_LOCALE_TAGS + ['']), ''),
