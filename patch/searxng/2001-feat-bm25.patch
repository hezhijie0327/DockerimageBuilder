diff --git a/requirements.txt b/requirements.txt
index f505e6b7465..ffcecbf15bf 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -19,3 +19,6 @@ tomli==2.2.1; python_version < '3.11'
 msgspec==0.19.0
 typer-slim==0.15.3
 isodate==0.7.2
+bm25s
+numpy==2.0.2; python_version < '3.10'
+scipy==1.13.1; python_version < '3.10'
diff --git a/searx/autocomplete.py b/searx/autocomplete.py
index ebe6972e3ae..05005e702b2 100644
--- a/searx/autocomplete.py
+++ b/searx/autocomplete.py
@@ -8,6 +8,9 @@
 import html
 from urllib.parse import urlencode, quote_plus
 
+import bm25s
+import bm25s.stopwords as stopwords_module
+
 import lxml.etree
 import lxml.html
 from httpx import HTTPError
@@ -308,14 +311,78 @@ def yandex(query, _lang):
     'swisscows': swisscows,
     'wikipedia': wikipedia,
     'yandex': yandex,
+    'all': 'all',
+    'custom': 'custom',
 }
 
 
+def deduplicate_results(results):
+    seen = set()
+    unique_results = []
+    for result in results:
+        if result not in seen:
+            unique_results.append(result)
+            seen.add(result)
+    return unique_results
+
+
+def rerank_results(results_list, query):
+    corpus = deduplicate_results([result for results in results_list for result in results])
+
+    stopwords = {
+        word
+        for name, value in stopwords_module.__dict__.items()
+        if name.startswith("STOPWORDS_") and isinstance(value, tuple)
+        for word in value
+    }
+
+    corpus_tokens = bm25s.tokenize(corpus, stopwords=stopwords)
+    query_tokens = bm25s.tokenize(query, stopwords=stopwords)
+
+    retriever = bm25s.BM25()
+    retriever.index(corpus_tokens)
+
+    documents, scores = retriever.retrieve(query_tokens, k=len(corpus), return_as='tuple', show_progress=False)
+
+    ranked_results = [
+        corpus[index] for index, _ in sorted(zip(documents[0], scores[0]), key=lambda x: x[1], reverse=True)
+    ]
+
+    return ranked_results
+
+
 def search_autocomplete(backend_name, query, sxng_locale):
+    excluded_backends = ['all', 'custom']
+
+    if backend_name == 'all':
+        results_list = []
+        for backend_key, backend in backends.items():
+            if backend_key not in excluded_backends:
+                try:
+                    results_list.append(backend(query, sxng_locale))
+                except (HTTPError, SearxEngineResponseException, ValueError):
+                    results_list.append([])
+        return rerank_results(results_list, query)
+
+    if backend_name == 'custom':
+        custom_backends = settings.get('search', {}).get('autocomplete_engines', [])
+
+        custom_backends = [backend.strip() for backend in custom_backends if backend.strip() in backends]
+
+        results_list = []
+        for backend_key in custom_backends:
+            backend = backends.get(backend_key)
+            if backend is not None:
+                try:
+                    results_list.append(backend(query, sxng_locale))
+                except (HTTPError, SearxEngineResponseException, ValueError):
+                    results_list.append([])
+        return rerank_results(results_list, query)
+
     backend = backends.get(backend_name)
     if backend is None:
         return []
     try:
         return backend(query, sxng_locale)
-    except (HTTPError, SearxEngineResponseException):
+    except (HTTPError, SearxEngineResponseException, ValueError):
         return []
diff --git a/searx/plugins/bm25_rerank.py b/searx/plugins/bm25_rerank.py
new file mode 100644
index 00000000000..d7691f44b1b
--- /dev/null
+++ b/searx/plugins/bm25_rerank.py
@@ -0,0 +1,63 @@
+# SPDX-License-Identifier: AGPL-3.0-or-later
+# pylint: disable=missing-module-docstring, missing-class-docstring, protected-access
+from __future__ import annotations
+import typing
+
+import bm25s
+import bm25s.stopwords as stopwords_module
+
+from searx.plugins import Plugin, PluginInfo
+from searx.result_types import EngineResults
+
+if typing.TYPE_CHECKING:
+    from searx.search import SearchWithPlugins
+    from searx.extended_types import SXNG_Request
+    from searx.plugins import PluginCfg
+
+
+class SXNGPlugin(Plugin):
+    """Rerank search results using the Okapi BM25 algorithm. The
+    results are reordered to improve relevance based on the query.
+    """
+
+    id = "bm25_rerank"
+    default_on = True
+
+    def __init__(self, plg_cfg: "PluginCfg") -> None:
+        super().__init__(plg_cfg)
+
+        self.info = PluginInfo(
+            id=self.id,
+            name="BM25 Rerank",
+            description="Rerank search results using the Okapi BM25 algorithm",
+            preference_section="general",
+        )
+
+    def post_search(self, request: "SXNG_Request", search: "SearchWithPlugins") -> EngineResults:
+        results = search.result_container.get_ordered_results()
+        query = search.search_query.query
+
+        corpus = [
+            f"{result.get('content', '')} | {result.get('title', '')} | {result.get('url', '')}" for result in results
+        ]
+
+        stopwords = {
+            word
+            for name, value in stopwords_module.__dict__.items()
+            if name.startswith("STOPWORDS_") and isinstance(value, tuple)
+            for word in value
+        }
+
+        corpus_tokens = bm25s.tokenize(corpus, stopwords=stopwords)
+        query_tokens = bm25s.tokenize(query, stopwords=stopwords)
+
+        retriever = bm25s.BM25()
+        retriever.index(corpus_tokens)
+
+        documents, scores = retriever.retrieve(query_tokens, k=len(corpus), return_as="tuple", show_progress=False)
+
+        for index in documents[0]:
+            score = scores[0][index]
+            for i, position in enumerate(results[index].get("positions", [])):
+                if isinstance(position, (int, float)):
+                    results[index]["positions"][i] = float(position / (score + 1))
diff --git a/searx/settings_defaults.py b/searx/settings_defaults.py
index b91657ff66b..2756dbfefef 100644
--- a/searx/settings_defaults.py
+++ b/searx/settings_defaults.py
@@ -156,6 +156,7 @@ def apply_schema(settings, schema, path_list):
     'search': {
         'safe_search': SettingsValue((0, 1, 2), 0),
         'autocomplete': SettingsValue(str, ''),
+        'autocomplete_engines': SettingsValue((list, str, False), ['']),
         'autocomplete_min': SettingsValue(int, 4),
         'favicon_resolver': SettingsValue(str, ''),
         'default_lang': SettingsValue(tuple(SXNG_LOCALE_TAGS + ['']), ''),
