diff --git a/searx/engines/google_pse.py b/searx/engines/google_pse.py
new file mode 100644
index 00000000000..3f13933b2d5
--- /dev/null
+++ b/searx/engines/google_pse.py
@@ -0,0 +1,96 @@
+# SPDX-License-Identifier: AGPL-3.0-or-later
+"""Google (Programable Search Engine) for SearXNG."""
+
+from urllib.parse import urlencode
+
+from searx.exceptions import SearxEngineAPIException
+from searx.utils import html_to_text
+
+about = {
+    "website": 'https://www.google.com',
+    "wikidata_id": 'Q9366',
+    "official_api_documentation": 'https://developers.google.com/custom-search/v1/overview',
+    "use_official_api": True,
+    "require_api_key": True,
+    "results": 'JSON',
+}
+
+categories = ['general']
+google_pse_category = 'general'
+
+paging = True
+results_per_page = 10
+
+safesearch = True
+time_range_support = True
+
+api_key = None
+engine_id = None
+
+time_range_dict = {'day': 'd1', 'week': 'w1', 'month': 'm1', 'year': 'y1'}
+
+base_url = "https://www.googleapis.com"
+
+
+def init(_):
+    if google_pse_category not in ('general', 'images'):
+        raise SearxEngineAPIException(f"Unsupported category: {google_pse_category}")
+
+
+def request(query, params):
+    query_params = {
+        "cx": engine_id,
+        "key": api_key,
+        "num": results_per_page,
+        "q": query,
+        "safe": 'active' if params['safesearch'] > 0 else 'off',
+        "start": ((params["pageno"] - 1) * results_per_page) + 1,
+    }
+
+    if time_range_dict.get(params['time_range']):
+        query_params["dateRestrict"] = time_range_dict.get(params['time_range'])
+
+    if google_pse_category == "images":
+        query_params["searchType"] = 'image'
+
+    params['url'] = f'{base_url}/customsearch/v1?{urlencode(query_params)}'
+    return params
+
+
+def _general_result(item):
+    return {
+        'url': item.get('link'),
+        'title': item.get('title'),
+        'content': html_to_text(item.get('snippet')),
+    }
+
+
+def _images_result(item):
+    height = item.get('image', {}).get('height')
+    width = item.get('image', {}).get('width')
+
+    return {
+        'template': 'images.html',
+        'url': item.get('image', {}).get('contextLink'),
+        'thumbnail_src': item.get('image', {}).get('thumbnailLink'),
+        'img_src': item.get('link'),
+        'title': item.get('title'),
+        'content': item.get('snippet'),
+        "source": item.get('displayLink'),
+        "resolution": f"{width} x {height}",
+        "img_format": item.get('fileFormat'),
+        "filesize": item.get('byteSize'),
+    }
+
+
+def response(resp):
+    results = []
+    search_results = resp.json()
+
+    for item in search_results.get('items', []):
+        if google_pse_category == "images":
+            results.append(_images_result(item))
+        else:
+            results.append(_general_result(item))
+
+    return results
