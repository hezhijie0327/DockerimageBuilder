diff --git a/searx/autocomplete.py b/searx/autocomplete.py
index 09589cf1f68..12ffca68f46 100644
--- a/searx/autocomplete.py
+++ b/searx/autocomplete.py
@@ -12,6 +12,7 @@
 from httpx import HTTPError
 
 from searx import settings
+from searx.utils import unique
 from searx.engines import (
     engines,
     google,
@@ -253,11 +254,31 @@ def yandex(query, _lang):
 }
 
 
-def search_autocomplete(backend_name, query, sxng_locale):
-    backend = backends.get(backend_name)
-    if backend is None:
-        return []
+def search_autocomplete(backend_names, query, sxng_locale):
+
+    enabled_backends = list(unique(backend_names))
+
+    len_enabled_backends = len(enabled_backends)
+
     try:
-        return backend(query, sxng_locale)
+        results = []
+
+        for backend_name in enabled_backends:
+            backend = backends.get(backend_name)
+            if backend is None:
+                # if somehow 'searx.preferences.ValidationException' was not raised
+                continue
+
+            backend_results = backend(query, sxng_locale)
+            if (len_enabled_backends > 2) and (len(backend_results) > 3):
+                # if more than 2 autocompleters: only get the first 3 results from each
+
+                results.extend(backend_results[:3])
+
+            else:
+                results.extend(backend_results)
+
+        return list(unique(results))
+
     except (HTTPError, SearxEngineResponseException):
         return []
diff --git a/searx/preferences.py b/searx/preferences.py
index 209cf06f162..aa342b26f77 100644
--- a/searx/preferences.py
+++ b/searx/preferences.py
@@ -96,6 +96,10 @@ class MultipleChoiceSetting(Setting):
     """Setting of values which can only come from the given choices"""
 
     def __init__(self, default_value: List[str], choices: Iterable[str], locked=False):
+        # backwards compat for autocomplete setting (was string, now is a list of strings)
+        if isinstance(default_value, str):
+            default_value = [str(val) for val in default_value.split(",")]
+
         super().__init__(default_value, locked)
         self.choices = choices
         self._validate_selections(self.value)
@@ -401,7 +405,7 @@ def __init__(
                 locked=is_locked('locale'),
                 choices=list(LOCALE_NAMES.keys()) + ['']
             ),
-            'autocomplete': EnumStringSetting(
+            'autocomplete': MultipleChoiceSetting(
                 settings['search']['autocomplete'],
                 locked=is_locked('autocomplete'),
                 choices=list(autocomplete.backends.keys()) + ['']
diff --git a/searx/settings_defaults.py b/searx/settings_defaults.py
index b70aaf941b4..c95eb081524 100644
--- a/searx/settings_defaults.py
+++ b/searx/settings_defaults.py
@@ -155,7 +155,7 @@ def apply_schema(settings, schema, path_list):
     },
     'search': {
         'safe_search': SettingsValue((0, 1, 2), 0),
-        'autocomplete': SettingsValue(str, ''),
+        'autocomplete': SettingsValue((list, str, False), ['']),
         'autocomplete_min': SettingsValue(int, 4),
         'favicon_resolver': SettingsValue(str, ''),
         'default_lang': SettingsValue(tuple(SXNG_LOCALE_TAGS + ['']), ''),
diff --git a/searx/utils.py b/searx/utils.py
index 4fcbd9e3c6f..8a4ea1e45ee 100644
--- a/searx/utils.py
+++ b/searx/utils.py
@@ -800,3 +800,14 @@ def js_variable_to_python(js_variable):
     s = s.replace(chr(1), ':')
     # load the JSON and return the result
     return json.loads(s)
+
+
+def unique(iterable):
+    """Yield unique elements from 'iterable' while preserving order
+    https://github.com/mikf/gallery-dl/blob/e03b99ba0ecbf653b89e68d00245da78694071fb/gallery_dl/util.py#L64C1-L71C26"""
+    seen = set()
+    add = seen.add
+    for element in iterable:
+        if element not in seen:
+            add(element)
+            yield element
