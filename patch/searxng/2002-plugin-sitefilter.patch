diff --git a/searx/plugins/site_filter.py b/searx/plugins/site_filter.py
new file mode 100644
index 00000000000..1652a20a0a3
--- /dev/null
+++ b/searx/plugins/site_filter.py
@@ -0,0 +1,89 @@
+# SPDX-License-Identifier: AGPL-3.0-or-later
+"""Site filter plugin for SearXNG.  Example of a *custom*
+SearXNG plugin that filters results based on site: query syntax."""
+
+import typing
+import re
+from urllib.parse import urlparse
+from flask_babel import gettext
+from searx.extended_types import SXNG_Request
+from searx.plugins import Plugin, PluginInfo
+from searx.result_types import Result
+
+if typing.TYPE_CHECKING:
+    from searx.plugins import PluginCfg
+    from searx.search import SearchWithPlugins
+
+
+class SXNGPlugin(Plugin):
+    """Plugin that filters search results based on site: query syntax.
+    When a user searches for 'site:github.com claude', only results from
+    github.com domain will be shown.
+    """
+
+    id = "site_filter"
+
+    def __init__(self, plg_cfg: "PluginCfg") -> None:
+        super().__init__(plg_cfg)
+        self.info = PluginInfo(
+            id=self.id,
+            name=gettext("Site Filter"),
+            description=gettext("Filter results by domain using site: syntax (e.g., site:github.com)"),
+            preference_section="general",
+        )
+
+    def pre_search(self, request: SXNG_Request, search: "SearchWithPlugins") -> bool:
+        """Parse the search query for site: syntax and extract the target domain."""
+        query = request.form.get('q', '')
+        # Parse site: syntax from query
+        site_match = re.search(r'site:([^\s]+)', query, re.IGNORECASE)
+        if site_match:
+            # Extract the target domain
+            target_domain = site_match.group(1).lower()
+            # Store the target domain in request for later use
+            request.site_filter_domain = target_domain
+            # Note: We don't modify the original query here to preserve
+            # the display in the search box. The filtering will be done
+            # in the on_result phase instead.
+        return True
+
+    def _is_domain_match(self, result_domain: str, target_domain: str) -> bool:
+        """Check if result domain matches target domain (exact or subdomain)."""
+        # Normalize domains to lowercase for comparison
+        result_domain = result_domain.lower()
+        target_domain = target_domain.lower()
+
+        # Check if the result domain matches the target domain
+        # Support both exact match and subdomain match
+        return result_domain == target_domain or result_domain.endswith('.' + target_domain)
+
+    def on_result(
+        self,
+        request: SXNG_Request,
+        search: "SearchWithPlugins",
+        result: Result,
+    ) -> bool:
+        """Filter results based on the target domain specified in site: syntax."""
+        # Check if site filter is active
+        if not hasattr(request, 'site_filter_domain'):
+            return True
+
+        # If result has no URL, keep it
+        if not result.url:
+            return True
+
+        try:
+            # Parse the result URL to get its domain
+            parsed_url = urlparse(result.url)
+            result_domain = parsed_url.hostname
+
+            # If hostname is None, exclude the result
+            if not result_domain:
+                return False
+
+            # Check domain match using helper method
+            return self._is_domain_match(result_domain, request.site_filter_domain)
+
+        except (ValueError, AttributeError):
+            # If there's any error parsing the URL, exclude the result
+            return False
