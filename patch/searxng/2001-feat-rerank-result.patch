diff --git a/requirements.txt b/requirements.txt
index 533fa3edb64..fb392d96da9 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -19,3 +19,12 @@ tomli==2.0.2; python_version < '3.11'
 msgspec==0.19.0
 typer-slim==0.15.1
 isodate==0.7.2
+bm25s==0.2.7.post1
+jax==0.5.0
+jaxlib==0.5.0
+ml_dtypes==0.5.1
+numpy==2.2.2
+opt_einsum==3.4.0
+PyStemmer==2.2.0.3
+pystreamer==0.4.3
+scipy==1.15.1
diff --git a/searx/plugins/rerank.py b/searx/plugins/rerank.py
new file mode 100644
index 00000000000..03d6705327c
--- /dev/null
+++ b/searx/plugins/rerank.py
@@ -0,0 +1,57 @@
+# SPDX-License-Identifier: AGPL-3.0-or-later
+# pylint: disable=protected-access
+"""Plugin which reranks the search results via Okapi BM25 algorithm.
+
+Enable in ``settings.yml``:
+
+.. code:: yaml
+
+  enabled_plugins:
+    ..
+    - 'Rerank plugin'
+"""
+
+from searx import settings
+
+import bm25s
+import bm25s.stopwords as stopwords_module
+import Stemmer
+
+name = 'Rerank plugin'
+description = 'Rerank search results via Okapi BM25 algorithm'
+default_on = True
+preference_section = 'general'
+
+
+def post_search(_request, search):
+    results = search.result_container._merged_results
+    query = search.search_query.query
+
+    stemmer = Stemmer.Stemmer("english")
+
+    stopwords = set()
+    for name, value in stopwords_module.__dict__.items():
+        if name.startswith("STOPWORDS_") and isinstance(value, tuple):
+            stopwords.update(value)
+
+    retriever = bm25s.BM25()
+    result_tokens = bm25s.tokenize(
+        [f"{result.get('content', '')} | {result.get('title', '')} | {result.get('url', '')}" for result in results],
+        stopwords=stopwords,
+        stemmer=stemmer
+    )
+    retriever.index(result_tokens)
+
+    query_tokens = bm25s.tokenize(query, stopwords=stopwords, stemmer=stemmer)
+
+    documents, scores = retriever.retrieve(query_tokens, k=len(results), return_as='tuple', show_progress=False)
+
+    for index in documents[0]:
+        if index < len(results) and isinstance(results[index].get('positions'), list):
+            score = 1 + scores[0][index]
+            results[index]['positions'] = [
+                float(position * score) if isinstance(position, (int, float)) else position
+                for position in results[index]['positions']
+            ]
+
+    return True
