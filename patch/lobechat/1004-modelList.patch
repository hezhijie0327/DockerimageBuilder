diff --git a/src/store/user/slices/modelList/action.ts b/src/store/user/slices/modelList/action.ts
index 9a6a90f8d74d..3ce50b53279d 100644
--- a/src/store/user/slices/modelList/action.ts
+++ b/src/store/user/slices/modelList/action.ts
@@ -89,23 +89,45 @@ export const createModelListSlice: StateCreator<
     };
 
     const defaultModelProviderList = produce(DEFAULT_MODEL_PROVIDER_LIST, (draft) => {
-      const openai = draft.find((d) => d.id === ModelProvider.OpenAI);
-      if (openai) openai.chatModels = mergeModels('openai', openai.chatModels);
-
-      const azure = draft.find((d) => d.id === ModelProvider.Azure);
-      if (azure) azure.chatModels = mergeModels('azure', azure.chatModels);
-
-      const ollama = draft.find((d) => d.id === ModelProvider.Ollama);
-      if (ollama) ollama.chatModels = mergeModels('ollama', ollama.chatModels);
-
-      const openrouter = draft.find((d) => d.id === ModelProvider.OpenRouter);
-      if (openrouter) openrouter.chatModels = mergeModels('openrouter', openrouter.chatModels);
-
-      const togetherai = draft.find((d) => d.id === ModelProvider.TogetherAI);
-      if (togetherai) togetherai.chatModels = mergeModels('togetherai', togetherai.chatModels);
-
-      const novita = draft.find((d) => d.id === ModelProvider.Novita);
-      if (novita) novita.chatModels = mergeModels('novita', novita.chatModels);
+      const providers = [
+        { id: ModelProvider.Ai21, name: 'ai21' },
+        { id: ModelProvider.Ai360, name: 'ai360' },
+        { id: ModelProvider.Anthropic, name: 'anthropic' },
+        { id: ModelProvider.Azure, name: 'azure' },
+        { id: ModelProvider.Baichuan, name: 'baichuan' },
+        { id: ModelProvider.Bedrock, name: 'bedrock' },
+        { id: ModelProvider.DeepSeek, name: 'deekseek' },
+        { id: ModelProvider.FireworksAI, name: 'fireworksai' },
+        { id: ModelProvider.Github, name: 'github' },
+        { id: ModelProvider.Google, name: 'google' },
+        { id: ModelProvider.Groq, name: 'groq' },
+        { id: ModelProvider.HuggingFace, name: 'huggingface' },
+        { id: ModelProvider.Hunyuan, name: 'hunyuan' },
+        { id: ModelProvider.Minimax, name: 'minimax' },
+        { id: ModelProvider.Mistral, name: 'mistral' },
+        { id: ModelProvider.Moonshot, name: 'moonshot' },
+        { id: ModelProvider.Novita, name: 'novita' },
+        { id: ModelProvider.Ollama, name: 'ollama' },
+        { id: ModelProvider.OpenAI, name: 'openai' },
+        { id: ModelProvider.OpenRouter, name: 'openrouter' },
+        { id: ModelProvider.Perplexity, name: 'perplexity' },
+        { id: ModelProvider.Qwen, name: 'qwen' },
+        { id: ModelProvider.SenseNova, name: 'sensenova' },
+        { id: ModelProvider.SiliconCloud, name: 'siliconcloud' },
+        { id: ModelProvider.Spark, name: 'spark' },
+        { id: ModelProvider.Stepfun, name: 'stepfun' },
+        { id: ModelProvider.Taichu, name: 'taichu' },
+        { id: ModelProvider.TogetherAI, name: 'togetherai' },
+        { id: ModelProvider.Upstage, name: 'upstage' },
+        { id: ModelProvider.Wenxin, name: 'wenxin' },
+        { id: ModelProvider.ZeroOne, name: 'zeroone' },
+        { id: ModelProvider.ZhiPu, name: 'zhipu' },
+      ];
+
+      providers.forEach(({ id, name }) => {
+        const provider = draft.find((d) => d.id === id);
+        if (provider) provider.chatModels = mergeModels(name as any, provider.chatModels);
+      });
     });
 
     set({ defaultModelProviderList }, false, `refreshDefaultModelList - ${params?.trigger}`);
