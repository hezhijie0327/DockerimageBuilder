diff --git a/Dockerfile b/Dockerfile
index 1607bacda983..a75e2dfeedd0 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -123,6 +123,8 @@ ENV \
     PERPLEXITY_API_KEY="" PERPLEXITY_PROXY_URL="" \
     # Qwen
     QWEN_API_KEY="" \
+    # Spark
+    SPARK_API_KEY="" SPARK_API_SECRET="" \
     # Stepfun
     STEPFUN_API_KEY="" \
     # Taichu
diff --git a/src/app/(main)/settings/llm/ProviderList/Spark/index.tsx b/src/app/(main)/settings/llm/ProviderList/Spark/index.tsx
new file mode 100644
index 000000000000..dda6e48aaad8
--- /dev/null
+++ b/src/app/(main)/settings/llm/ProviderList/Spark/index.tsx
@@ -0,0 +1,51 @@
+'use client';
+
+import { Spark } from '@lobehub/icons';
+
+import { Input } from 'antd';
+import { useTranslation } from 'react-i18next';
+
+import { SparkProviderCard } from '@/config/modelProviders';
+import { GlobalLLMProviderKey } from '@/types/user/settings';
+
+import { KeyVaultsConfigKey } from '../../const';
+import { ProviderItem } from '../../type';
+
+const providerKey: GlobalLLMProviderKey = 'spark';
+
+const SparkBrand = () => (
+  <Spark.Combine size={ 22 } type={ 'color' } />
+);
+
+export const useSparkProvider = (): ProviderItem => {
+  const { t } = useTranslation('modelProvider');
+
+  return {
+    ...SparkProviderCard,
+    apiKeyItems: [
+      {
+        children: (
+          <Input.Password
+            autoComplete={'new-password'}
+            placeholder={t('spark.sparkApiKey.placeholder')}
+          />
+        ),
+        desc: t('spark.sparkApiKey.desc'),
+        label: t('spark.sparkApiKey.title'),
+        name: [KeyVaultsConfigKey, providerKey, 'sparkApiKey'],
+      },
+      {
+        children: (
+          <Input.Password
+            autoComplete={'new-password'}
+            placeholder={t('spark.sparkApiSecret.placeholder')}
+          />
+        ),
+        desc: t('spark.sparkApiSecret.desc'),
+        label: t('spark.sparkApiSecret.title'),
+        name: [KeyVaultsConfigKey, providerKey, 'sparkApiSecret'],
+      },
+    ],
+    title: <SparkBrand />,
+  };
+};
diff --git a/src/app/(main)/settings/llm/ProviderList/providers.tsx b/src/app/(main)/settings/llm/ProviderList/providers.tsx
index 30aa944167b1..5768d444477a 100644
--- a/src/app/(main)/settings/llm/ProviderList/providers.tsx
+++ b/src/app/(main)/settings/llm/ProviderList/providers.tsx
@@ -52,6 +52,7 @@ import { useAzureProvider } from './Azure';
 import { useBedrockProvider } from './Bedrock';
 import { useOllamaProvider } from './Ollama';
 import { useOpenAIProvider } from './OpenAI';
+import { useSparkProvider } from './Spark';
 
 const BASE_DOC_URL = 'https://lobehub.com/docs/usage/providers';
 
@@ -89,6 +90,7 @@ export const useProviderList = (): ProviderItem[] => {
   const ollamaProvider = useOllamaProvider();
   const openAIProvider = useOpenAIProvider();
   const bedrockProvider = useBedrockProvider();
+  const sparkProvider = useSparkProvider();
 
   return useMemo(
     () => [
@@ -198,7 +200,11 @@ export const useProviderList = (): ProviderItem[] => {
         docUrl: urlJoin(BASE_DOC_URL, 'ai360'),
         title: <Ai360.Combine size={ 20 } type={ 'color' } />,
       },
+      {
+        ...sparkProvider,
+        docUrl: urlJoin(BASE_DOC_URL, 'spark')
+      },
     ],
-    [azureProvider, ollamaProvider, ollamaProvider, bedrockProvider],
+    [azureProvider, ollamaProvider, ollamaProvider, bedrockProvider, sparkProvider],
   );
 };
diff --git a/src/app/api/chat/agentRuntime.ts b/src/app/api/chat/agentRuntime.ts
index e5ff047ef3fc..f731cf0231ad 100644
--- a/src/app/api/chat/agentRuntime.ts
+++ b/src/app/api/chat/agentRuntime.ts
@@ -198,6 +198,16 @@ const getLlmOptionsFromPayload = (provider: string, payload: JWTPayload) => {
 
       const apiKey = apiKeyManager.pick(payload?.apiKey || AI360_API_KEY);
 
+      return { apiKey };
+    }
+    case ModelProvider.Spark: {
+      const { SPARK_API_KEY, SPARK_API_SECRET } = getLLMConfig();
+
+      const sparkApiKey = payload?.sparkApiKey || SPARK_API_KEY;
+      const sparkApiSecret = payload?.sparkApiSecret || SPARK_API_SECRET;
+
+      const apiKey = sparkApiKey + ':' + sparkApiSecret;
+
       return { apiKey };
     }
   }
diff --git a/src/components/ModelIcon/index.tsx b/src/components/ModelIcon/index.tsx
index 5135ee8eda6a..0bca4a252341 100644
--- a/src/components/ModelIcon/index.tsx
+++ b/src/components/ModelIcon/index.tsx
@@ -78,7 +78,9 @@ const ModelIcon = memo<ModelProviderIconProps>(({ model: originModel, size = 12
     return <Baichuan.Avatar background={Baichuan.colorPrimary} size={size} />;
   if (model.includes('rwkv')) return <Rwkv.Avatar size={size} />;
   if (model.includes('ernie')) return <Wenxin.Avatar size={size} />;
-  if (model.includes('spark')) return <Spark.Avatar size={size} />;
+  // ref https://www.xfyun.cn/doc/spark/HTTP%E8%B0%83%E7%94%A8%E6%96%87%E6%A1%A3.html#_3-%E8%AF%B7%E6%B1%82%E8%AF%B4%E6%98%8E
+  if (model.includes('spark') || model.startsWith('general') || model.startsWith('4.0ultra') || model.startsWith('pro-128k'))
+    return <Spark.Avatar size={size} />;
   if (model.includes('hunyuan')) return <Hunyuan.Avatar size={size} />;
   // ref https://github.com/fishaudio/Bert-VITS2/blob/master/train_ms.py#L702
   if (model.startsWith('d_') || model.startsWith('g_') || model.startsWith('wd_'))
diff --git a/src/components/ModelProviderIcon/index.tsx b/src/components/ModelProviderIcon/index.tsx
index de6270991684..a25e507f68f8 100644
--- a/src/components/ModelProviderIcon/index.tsx
+++ b/src/components/ModelProviderIcon/index.tsx
@@ -17,6 +17,7 @@ import {
   OpenAI,
   OpenRouter,
   Perplexity,
+  Spark,
   Stepfun,
   Together,
   Tongyi,
@@ -134,6 +135,10 @@ const ModelProviderIcon = memo<ModelProviderIconProps>(({ provider }) => {
       return <Ai360 size={20} />;
     }
 
+    case ModelProvider.Spark: {
+      return <Spark size={20} />;
+    }
+
     default: {
       return null;
     }
diff --git a/src/components/ModelTag/ModelIcon.tsx b/src/components/ModelTag/ModelIcon.tsx
index c5d01fcd432a..b822a8e6597b 100644
--- a/src/components/ModelTag/ModelIcon.tsx
+++ b/src/components/ModelTag/ModelIcon.tsx
@@ -29,6 +29,7 @@ import {
   Rwkv,
   Spark,
   Stability,
+  Stepfun,
   Tongyi,
   Wenxin,
   Yi,
@@ -40,8 +41,11 @@ interface ModelIconProps {
   size?: number;
 }
 
-const ModelIcon = memo<ModelIconProps>(({ model, size = 12 }) => {
-  if (!model) return;
+const ModelIcon = memo<ModelIconProps>(({ model: originModel, size = 12 }) => {
+  if (!originModel) return;
+
+  // lower case the origin model so to better match more model id case
+  const model = originModel.toLowerCase();
 
   // currently supported models, maybe not in its own provider
   if (model.startsWith('gpt')) return <OpenAI size={size} />;
@@ -65,6 +69,7 @@ const ModelIcon = memo<ModelIconProps>(({ model, size = 12 }) => {
   if (model.startsWith('openchat')) return <OpenChat size={size} />;
   if (model.includes('command')) return <Cohere size={size} />;
   if (model.includes('dbrx')) return <Dbrx size={size} />;
+  if (model.includes('step')) return <Stepfun size={size} />;
   if (model.includes('taichu')) return <AiMass size={size} />;
   if (model.includes('360gpt')) return <Ai360 size={size} />;
 
@@ -72,7 +77,9 @@ const ModelIcon = memo<ModelIconProps>(({ model, size = 12 }) => {
   if (model.includes('baichuan')) return <Baichuan size={size} />;
   if (model.includes('rwkv')) return <Rwkv size={size} />;
   if (model.includes('ernie')) return <Wenxin size={size} />;
-  if (model.includes('spark')) return <Spark size={size} />;
+  // ref https://www.xfyun.cn/doc/spark/HTTP%E8%B0%83%E7%94%A8%E6%96%87%E6%A1%A3.html#_3-%E8%AF%B7%E6%B1%82%E8%AF%B4%E6%98%8E
+  if (model.includes('spark') || model.startsWith('general') || model.startsWith('4.0ultra') || model.startsWith('pro-128k'))
+    return <Spark size={size} />;
   if (model.includes('hunyuan')) return <Hunyuan size={size} />;
   // ref https://github.com/fishaudio/Bert-VITS2/blob/master/train_ms.py#L702
   if (model.startsWith('d_') || model.startsWith('g_') || model.startsWith('wd_'))
diff --git a/src/config/llm.ts b/src/config/llm.ts
index b745e7a235bc..9b05cedd2b7f 100644
--- a/src/config/llm.ts
+++ b/src/config/llm.ts
@@ -87,6 +87,10 @@ export const getLLMConfig = () => {
 
       ENABLED_AI360: z.boolean(),
       AI360_API_KEY: z.string().optional(),
+
+      ENABLED_SPARK: z.boolean(),
+      SPARK_API_KEY: z.string().optional(),
+      SPARK_API_SECRET: z.string().optional(),
     },
     runtimeEnv: {
       API_KEY_SELECT_MODE: process.env.API_KEY_SELECT_MODE,
@@ -171,6 +175,10 @@ export const getLLMConfig = () => {
 
       ENABLED_AI360: !!process.env.AI360_API_KEY,
       AI360_API_KEY: process.env.AI360_API_KEY,
+
+      ENABLED_SPARK: !!process.env.SPARK_API_KEY && !!process.env.SPARK_API_SECRET,
+      SPARK_API_KEY: process.env.SPARK_API_KEY,
+      SPARK_API_SECRET: process.env.SPARK_API_SECRET,
     },
   });
 };
diff --git a/src/config/modelProviders/index.ts b/src/config/modelProviders/index.ts
index db5ae1446e8b..2d7bb273c9f9 100644
--- a/src/config/modelProviders/index.ts
+++ b/src/config/modelProviders/index.ts
@@ -17,6 +17,7 @@ import OpenAIProvider from './openai';
 import OpenRouterProvider from './openrouter';
 import PerplexityProvider from './perplexity';
 import QwenProvider from './qwen';
+import SparkProvider from './spark';
 import StepfunProvider from './stepfun';
 import TaichuProvider from './taichu';
 import TogetherAIProvider from './togetherai';
@@ -45,6 +46,7 @@ export const LOBE_DEFAULT_MODEL_LIST: ChatModelCard[] = [
   BaichuanProvider.chatModels,
   TaichuProvider.chatModels,
   Ai360Provider.chatModels,
+  SparkProvider.chatModels,
 ].flat();
 
 export const DEFAULT_MODEL_PROVIDER_LIST = [
@@ -70,6 +72,7 @@ export const DEFAULT_MODEL_PROVIDER_LIST = [
   BaichuanProvider,
   TaichuProvider,
   Ai360Provider,
+  SparkProvider,
 ];
 
 export const filterEnabledModels = (provider: ModelProviderCard) => {
@@ -98,6 +101,7 @@ export { default as OpenAIProviderCard } from './openai';
 export { default as OpenRouterProviderCard } from './openrouter';
 export { default as PerplexityProviderCard } from './perplexity';
 export { default as QwenProviderCard } from './qwen';
+export { default as SparkProviderCard } from './spark';
 export { default as StepfunProviderCard } from './stepfun';
 export { default as TaichuProviderCard } from './taichu';
 export { default as TogetherAIProviderCard } from './togetherai';
diff --git a/src/config/modelProviders/spark.ts b/src/config/modelProviders/spark.ts
new file mode 100644
index 000000000000..848219521363
--- /dev/null
+++ b/src/config/modelProviders/spark.ts
@@ -0,0 +1,59 @@
+import { ModelProviderCard } from '@/types/llm';
+
+// ref https://www.xfyun.cn/doc/spark/HTTP%E8%B0%83%E7%94%A8%E6%96%87%E6%A1%A3.html#_3-%E8%AF%B7%E6%B1%82%E8%AF%B4%E6%98%8E
+// ref https://www.xfyun.cn/doc/spark/Web.html#_1-%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E
+const Spark: ModelProviderCard = {
+  chatModels: [
+    {
+      description: '轻量级大语言模型，低延迟，全免费 支持在线联网搜索功能 响应快速、便捷，全面免费开放 适用于低算力推理与模型精调等定制化场景',
+      displayName: 'Spark Lite',
+      enabled: true,
+      functionCall: false,
+      id: 'general',
+      maxOutput: 4096,
+      tokens: 8192,
+    },
+    {
+      description: '专业级大语言模型，兼顾模型效果与性能 数学、代码、医疗、教育等场景专项优化 支持联网搜索、天气、日期等多个内置插件 覆盖大部分知识问答、语言理解、文本创作等多个场景',
+      displayName: 'Spark Pro',
+      enabled: true,
+      functionCall: false,
+      id: 'generalv3',
+      maxOutput: 8192,
+      tokens: 8192,
+    },
+    {
+      description: '支持最长上下文的星火大模型，长文无忧 128K星火大模型强势来袭 通读全文，旁征博引 沟通无界，逻辑连贯',
+      displayName: 'Spark Pro-128K',
+      enabled: true,
+      functionCall: false,
+      id: 'Pro-128k',
+      maxOutput: 4096,
+      tokens: 128_000,
+    },
+    {
+      description: '最全面的星火大模型版本，功能丰富 支持联网搜索、天气、日期等多个内置插件 核心能力全面升级，各场景应用效果普遍提升 支持System角色人设与FunctionCall函数调用',
+      displayName: 'Spark3.5 Max',
+      enabled: true,
+      functionCall: false,
+      id: 'generalv3.5',
+      maxOutput: 8192,
+      tokens: 8192,
+    },
+    {
+      description: '最强大的星火大模型版本，效果极佳 全方位提升效果，引领智能巅峰 优化联网搜索链路，提供精准回答 强化文本总结能力，提升办公生产力',
+      displayName: 'Spark4.0 Ultra',
+      enabled: true,
+      functionCall: false,
+      id: '4.0Ultra',
+      maxOutput: 8192,
+      tokens: 8192,
+    },
+  ],
+  checkModel: 'generalv3',
+  id: 'spark',
+  modelList: { showModelFetcher: true },
+  name: 'Spark',
+};
+
+export default Spark;
diff --git a/src/const/auth.ts b/src/const/auth.ts
index 1c0fd878dd35..949d345eb833 100644
--- a/src/const/auth.ts
+++ b/src/const/auth.ts
@@ -41,5 +41,8 @@ export interface JWTPayload {
    * in server db mode it's a user id
    */
   userId?: string;
+
+  sparkApiKey?: string;
+  sparkApiSecret?: string;
 }
 /* eslint-enable */
diff --git a/src/const/settings/llm.ts b/src/const/settings/llm.ts
index 1cd98e069ae8..5282996a3760 100644
--- a/src/const/settings/llm.ts
+++ b/src/const/settings/llm.ts
@@ -15,6 +15,7 @@ import {
   OpenRouterProviderCard,
   PerplexityProviderCard,
   QwenProviderCard,
+  SparkProviderCard,
   StepfunProviderCard,
   TaichuProviderCard,
   TogetherAIProviderCard,
@@ -94,6 +95,10 @@ export const DEFAULT_LLM_CONFIG: UserModelProviderConfig = {
     enabled: false,
     enabledModels: filterEnabledModels(QwenProviderCard),
   },
+  spark: {
+    enabled: false,
+    enabledModels: filterEnabledModels(SparkProviderCard),
+  },
   stepfun: {
     enabled: false,
     enabledModels: filterEnabledModels(StepfunProviderCard),
diff --git a/src/features/Conversation/Error/APIKeyForm/Spark.tsx b/src/features/Conversation/Error/APIKeyForm/Spark.tsx
new file mode 100644
index 000000000000..23dea8056d9d
--- /dev/null
+++ b/src/features/Conversation/Error/APIKeyForm/Spark.tsx
@@ -0,0 +1,49 @@
+import { Spark } from '@lobehub/icons';
+import { Input } from 'antd';
+import { memo } from 'react';
+import { useTranslation } from 'react-i18next';
+
+import { ModelProvider } from '@/libs/agent-runtime';
+import { useUserStore } from '@/store/user';
+import { keyVaultsConfigSelectors } from '@/store/user/selectors';
+
+import { FormAction } from '../style';
+
+const SparkForm = memo(() => {
+  const { t } = useTranslation('modelProvider');
+
+  const [sparkApiKey, sparkApiSecret, setConfig] = useUserStore((s) => [
+    keyVaultsConfigSelectors.sparkConfig(s).sparkApiKey,
+    keyVaultsConfigSelectors.sparkConfig(s).sparkApiSecret,
+    s.updateKeyVaultConfig,
+  ]);
+
+  return (
+    <FormAction
+      avatar={<Spark color={Spark.colorPrimary} size={56} />}
+      description={t('spark.unlock.description')}
+      title={t('spark.unlock.title')}
+    >
+      <Input.Password
+        autoComplete={'new-password'}
+        onChange={(e) => {
+          setConfig(ModelProvider.Spark, { sparkApiKey: e.target.value });
+        }}
+        placeholder={t('spark.sparkApiKey.placeholder')}
+        type={'block'}
+        value={sparkApiKey}
+      />
+      <Input.Password
+        autoComplete={'new-password'}
+        onChange={(e) => {
+          setConfig(ModelProvider.Spark, { sparkApiSecret: e.target.value });
+        }}
+        placeholder={t('spark.sparkApiSecret.placeholder')}
+        type={'block'}
+        value={sparkApiSecret}
+      />
+    </FormAction>
+  );
+});
+
+export default SparkForm;
diff --git a/src/features/Conversation/Error/APIKeyForm/index.tsx b/src/features/Conversation/Error/APIKeyForm/index.tsx
index 832f3b4c9168..b9630f1386d9 100644
--- a/src/features/Conversation/Error/APIKeyForm/index.tsx
+++ b/src/features/Conversation/Error/APIKeyForm/index.tsx
@@ -10,6 +10,7 @@ import { GlobalLLMProviderKey } from '@/types/user/settings';
 import BedrockForm from './Bedrock';
 import ProviderApiKeyForm from './ProviderApiKeyForm';
 import ProviderAvatar from './ProviderAvatar';
+import SparkForm from './Spark';
 
 interface APIKeyFormProps {
   id: string;
@@ -61,6 +62,8 @@ const APIKeyForm = memo<APIKeyFormProps>(({ id, provider }) => {
     <Center gap={16} style={{ maxWidth: 300 }}>
       {provider === ModelProvider.Bedrock ? (
         <BedrockForm />
+      ) : provider === ModelProvider.Spark ? (
+        <SparkForm />
       ) : (
         <ProviderApiKeyForm
           apiKeyPlaceholder={apiKeyPlaceholder}
diff --git a/src/libs/agent-runtime/AgentRuntime.ts b/src/libs/agent-runtime/AgentRuntime.ts
index fdb28eb25b3f..9ab5c4994be0 100644
--- a/src/libs/agent-runtime/AgentRuntime.ts
+++ b/src/libs/agent-runtime/AgentRuntime.ts
@@ -20,6 +20,7 @@ import { LobeOpenAI } from './openai';
 import { LobeOpenRouterAI } from './openrouter';
 import { LobePerplexityAI } from './perplexity';
 import { LobeQwenAI } from './qwen';
+import { LobeSparkAI } from './spark';
 import { LobeStepfunAI } from './stepfun';
 import { LobeTaichuAI } from './taichu';
 import { LobeTogetherAI } from './togetherai';
@@ -122,6 +123,7 @@ class AgentRuntime {
       openrouter: Partial<ClientOptions>;
       perplexity: Partial<ClientOptions>;
       qwen: Partial<ClientOptions>;
+      spark: Partial<ClientOptions>;
       stepfun: Partial<ClientOptions>;
       taichu: Partial<ClientOptions>;
       togetherai: Partial<ClientOptions>;
@@ -247,6 +249,11 @@ class AgentRuntime {
         runtimeModel = new LobeAi360AI(params.ai360 ?? {});
         break
       }
+
+      case ModelProvider.Spark: {
+        runtimeModel = new LobeSparkAI(params.spark ?? {});
+        break
+      }
     }
 
     return new AgentRuntime(runtimeModel);
diff --git a/src/libs/agent-runtime/spark/index.test.ts b/src/libs/agent-runtime/spark/index.test.ts
new file mode 100644
index 000000000000..7b6b1a2b1a06
--- /dev/null
+++ b/src/libs/agent-runtime/spark/index.test.ts
@@ -0,0 +1,255 @@
+// @vitest-environment node
+import OpenAI from 'openai';
+import { Mock, afterEach, beforeEach, describe, expect, it, vi } from 'vitest';
+
+import {
+  ChatStreamCallbacks,
+  LobeOpenAICompatibleRuntime,
+  ModelProvider,
+} from '@/libs/agent-runtime';
+
+import * as debugStreamModule from '../utils/debugStream';
+import { LobeSparkAI } from './index';
+
+const provider = ModelProvider.Spark;
+const defaultBaseURL = 'https://spark-api-open.xf-yun.com/v1';
+
+const bizErrorType = 'ProviderBizError';
+const invalidErrorType = 'InvalidProviderAPIKey';
+
+// Mock the console.error to avoid polluting test output
+vi.spyOn(console, 'error').mockImplementation(() => {});
+
+let instance: LobeOpenAICompatibleRuntime;
+
+beforeEach(() => {
+  instance = new LobeSparkAI({ apiKey: 'test' });
+
+  // 使用 vi.spyOn 来模拟 chat.completions.create 方法
+  vi.spyOn(instance['client'].chat.completions, 'create').mockResolvedValue(
+    new ReadableStream() as any,
+  );
+});
+
+afterEach(() => {
+  vi.clearAllMocks();
+});
+
+describe('LobeSparkAI', () => {
+  describe('init', () => {
+    it('should correctly initialize with an API key', async () => {
+      const instance = new LobeSparkAI({ apiKey: 'test_api_key' });
+      expect(instance).toBeInstanceOf(LobeSparkAI);
+      expect(instance.baseURL).toEqual(defaultBaseURL);
+    });
+  });
+
+  describe('chat', () => {
+    describe('Error', () => {
+      it('should return OpenAIBizError with an openai error response when OpenAI.APIError is thrown', async () => {
+        // Arrange
+        const apiError = new OpenAI.APIError(
+          400,
+          {
+            status: 400,
+            error: {
+              message: 'Bad Request',
+            },
+          },
+          'Error message',
+          {},
+        );
+
+        vi.spyOn(instance['client'].chat.completions, 'create').mockRejectedValue(apiError);
+
+        // Act
+        try {
+          await instance.chat({
+            messages: [{ content: 'Hello', role: 'user' }],
+            model: 'general',
+            temperature: 0,
+          });
+        } catch (e) {
+          expect(e).toEqual({
+            endpoint: defaultBaseURL,
+            error: {
+              error: { message: 'Bad Request' },
+              status: 400,
+            },
+            errorType: bizErrorType,
+            provider,
+          });
+        }
+      });
+
+      it('should throw AgentRuntimeError with NoOpenAIAPIKey if no apiKey is provided', async () => {
+        try {
+          new LobeSparkAI({});
+        } catch (e) {
+          expect(e).toEqual({ errorType: invalidErrorType });
+        }
+      });
+
+      it('should return OpenAIBizError with the cause when OpenAI.APIError is thrown with cause', async () => {
+        // Arrange
+        const errorInfo = {
+          stack: 'abc',
+          cause: {
+            message: 'api is undefined',
+          },
+        };
+        const apiError = new OpenAI.APIError(400, errorInfo, 'module error', {});
+
+        vi.spyOn(instance['client'].chat.completions, 'create').mockRejectedValue(apiError);
+
+        // Act
+        try {
+          await instance.chat({
+            messages: [{ content: 'Hello', role: 'user' }],
+            model: 'general',
+            temperature: 0,
+          });
+        } catch (e) {
+          expect(e).toEqual({
+            endpoint: defaultBaseURL,
+            error: {
+              cause: { message: 'api is undefined' },
+              stack: 'abc',
+            },
+            errorType: bizErrorType,
+            provider,
+          });
+        }
+      });
+
+      it('should return OpenAIBizError with an cause response with desensitize Url', async () => {
+        // Arrange
+        const errorInfo = {
+          stack: 'abc',
+          cause: { message: 'api is undefined' },
+        };
+        const apiError = new OpenAI.APIError(400, errorInfo, 'module error', {});
+
+        instance = new LobeSparkAI({
+          apiKey: 'test',
+
+          baseURL: 'https://api.abc.com/v1',
+        });
+
+        vi.spyOn(instance['client'].chat.completions, 'create').mockRejectedValue(apiError);
+
+        // Act
+        try {
+          await instance.chat({
+            messages: [{ content: 'Hello', role: 'user' }],
+            model: 'general',
+            temperature: 0,
+          });
+        } catch (e) {
+          expect(e).toEqual({
+            endpoint: 'https://api.***.com/v1',
+            error: {
+              cause: { message: 'api is undefined' },
+              stack: 'abc',
+            },
+            errorType: bizErrorType,
+            provider,
+          });
+        }
+      });
+
+      it('should throw an InvalidSparkAPIKey error type on 401 status code', async () => {
+        // Mock the API call to simulate a 401 error
+        const error = new Error('Unauthorized') as any;
+        error.status = 401;
+        vi.mocked(instance['client'].chat.completions.create).mockRejectedValue(error);
+
+        try {
+          await instance.chat({
+            messages: [{ content: 'Hello', role: 'user' }],
+            model: 'general',
+            temperature: 0,
+          });
+        } catch (e) {
+          // Expect the chat method to throw an error with InvalidSparkAPIKey
+          expect(e).toEqual({
+            endpoint: defaultBaseURL,
+            error: new Error('Unauthorized'),
+            errorType: invalidErrorType,
+            provider,
+          });
+        }
+      });
+
+      it('should return AgentRuntimeError for non-OpenAI errors', async () => {
+        // Arrange
+        const genericError = new Error('Generic Error');
+
+        vi.spyOn(instance['client'].chat.completions, 'create').mockRejectedValue(genericError);
+
+        // Act
+        try {
+          await instance.chat({
+            messages: [{ content: 'Hello', role: 'user' }],
+            model: 'general',
+            temperature: 0,
+          });
+        } catch (e) {
+          expect(e).toEqual({
+            endpoint: defaultBaseURL,
+            errorType: 'AgentRuntimeError',
+            provider,
+            error: {
+              name: genericError.name,
+              cause: genericError.cause,
+              message: genericError.message,
+              stack: genericError.stack,
+            },
+          });
+        }
+      });
+    });
+
+    describe('DEBUG', () => {
+      it('should call debugStream and return StreamingTextResponse when DEBUG_SPARK_CHAT_COMPLETION is 1', async () => {
+        // Arrange
+        const mockProdStream = new ReadableStream() as any; // 模拟的 prod 流
+        const mockDebugStream = new ReadableStream({
+          start(controller) {
+            controller.enqueue('Debug stream content');
+            controller.close();
+          },
+        }) as any;
+        mockDebugStream.toReadableStream = () => mockDebugStream; // 添加 toReadableStream 方法
+
+        // 模拟 chat.completions.create 返回值，包括模拟的 tee 方法
+        (instance['client'].chat.completions.create as Mock).mockResolvedValue({
+          tee: () => [mockProdStream, { toReadableStream: () => mockDebugStream }],
+        });
+
+        // 保存原始环境变量值
+        const originalDebugValue = process.env.DEBUG_SPARK_CHAT_COMPLETION;
+
+        // 模拟环境变量
+        process.env.DEBUG_SPARK_CHAT_COMPLETION = '1';
+        vi.spyOn(debugStreamModule, 'debugStream').mockImplementation(() => Promise.resolve());
+
+        // 执行测试
+        // 运行你的测试函数，确保它会在条件满足时调用 debugStream
+        // 假设的测试函数调用，你可能需要根据实际情况调整
+        await instance.chat({
+          messages: [{ content: 'Hello', role: 'user' }],
+          model: 'general',
+          stream: true,
+          temperature: 0,
+        });
+
+        // 验证 debugStream 被调用
+        expect(debugStreamModule.debugStream).toHaveBeenCalled();
+
+        // 恢复原始环境变量值
+        process.env.DEBUG_SPARK_CHAT_COMPLETION = originalDebugValue;
+      });
+    });
+  });
+});
diff --git a/src/libs/agent-runtime/spark/index.ts b/src/libs/agent-runtime/spark/index.ts
new file mode 100644
index 000000000000..8cc8dfe1e28e
--- /dev/null
+++ b/src/libs/agent-runtime/spark/index.ts
@@ -0,0 +1,13 @@
+import { ModelProvider } from '../types';
+import { LobeOpenAICompatibleFactory } from '../utils/openaiCompatibleFactory';
+
+export const LobeSparkAI = LobeOpenAICompatibleFactory({
+  baseURL: 'https://spark-api-open.xf-yun.com/v1',
+  chatCompletion: {
+    noUserId: true,
+  },
+  debug: {
+    chatCompletion: () => process.env.DEBUG_SPARK_CHAT_COMPLETION === '1',
+  },
+  provider: ModelProvider.Spark,
+});
diff --git a/src/libs/agent-runtime/types/type.ts b/src/libs/agent-runtime/types/type.ts
index b2ebbc83e82f..f21b96f58b63 100644
--- a/src/libs/agent-runtime/types/type.ts
+++ b/src/libs/agent-runtime/types/type.ts
@@ -39,6 +39,7 @@ export enum ModelProvider {
   OpenRouter = 'openrouter',
   Perplexity = 'perplexity',
   Qwen = 'qwen',
+  Spark = 'spark',
   Stepfun = 'stepfun',
   Taichu = 'taichu',
   TogetherAI = 'togetherai',
diff --git a/src/libs/agent-runtime/utils/openaiCompatibleFactory/index.test.ts b/src/libs/agent-runtime/utils/openaiCompatibleFactory/index.test.ts
index 594f7eac59a0..39fcc764dba1 100644
--- a/src/libs/agent-runtime/utils/openaiCompatibleFactory/index.test.ts
+++ b/src/libs/agent-runtime/utils/openaiCompatibleFactory/index.test.ts
@@ -417,6 +417,92 @@ describe('LobeOpenAICompatibleFactory', () => {
       });
     });
 
+    describe('noUserId option', () => {
+      it('should not add user to payload when noUserId is true', async () => {
+        const LobeMockProvider = LobeOpenAICompatibleFactory({
+          baseURL: 'https://spark-api-open.xf-yun.com/v1',
+          chatCompletion: {
+            noUserId: true,
+          },
+          provider: ModelProvider.Spark,
+        });
+    
+        const instance = new LobeMockProvider({ apiKey: 'test' });
+        const mockCreateMethod = vi.spyOn(instance['client'].chat.completions, 'create').mockResolvedValue(new ReadableStream() as any);
+    
+        await instance.chat(
+          {
+            messages: [{ content: 'Hello', role: 'user' }],
+            model: 'general',
+            temperature: 0,
+          },
+          { user: 'testUser' }
+        );
+    
+        expect(mockCreateMethod).toHaveBeenCalledWith(
+          expect.not.objectContaining({
+            user: 'testUser',
+          }),
+          expect.anything()
+        );
+      });
+    
+      it('should add user to payload when noUserId is false', async () => {
+        const LobeMockProvider = LobeOpenAICompatibleFactory({
+          baseURL: 'https://spark-api-open.xf-yun.com/v1',
+          chatCompletion: {
+            noUserId: false,
+          },
+          provider: ModelProvider.Spark,
+        });
+    
+        const instance = new LobeMockProvider({ apiKey: 'test' });
+        const mockCreateMethod = vi.spyOn(instance['client'].chat.completions, 'create').mockResolvedValue(new ReadableStream() as any);
+    
+        await instance.chat(
+          {
+            messages: [{ content: 'Hello', role: 'user' }],
+            model: 'general',
+            temperature: 0,
+          },
+          { user: 'testUser' }
+        );
+    
+        expect(mockCreateMethod).toHaveBeenCalledWith(
+          expect.objectContaining({
+            user: 'testUser',
+          }),
+          expect.anything()
+        );
+      });
+    
+      it('should add user to payload when noUserId is not set in chatCompletion', async () => {
+        const LobeMockProvider = LobeOpenAICompatibleFactory({
+          baseURL: 'https://spark-api-open.xf-yun.com/v1',
+          provider: ModelProvider.Spark,
+        });
+    
+        const instance = new LobeMockProvider({ apiKey: 'test' });
+        const mockCreateMethod = vi.spyOn(instance['client'].chat.completions, 'create').mockResolvedValue(new ReadableStream() as any);
+    
+        await instance.chat(
+          {
+            messages: [{ content: 'Hello', role: 'user' }],
+            model: 'general',
+            temperature: 0,
+          },
+          { user: 'testUser' }
+        );
+    
+        expect(mockCreateMethod).toHaveBeenCalledWith(
+          expect.objectContaining({
+            user: 'testUser',
+          }),
+          expect.anything()
+        );
+      });
+    });
+
     describe('cancel request', () => {
       it('should cancel ongoing request correctly', async () => {
         const controller = new AbortController();
diff --git a/src/libs/agent-runtime/utils/openaiCompatibleFactory/index.ts b/src/libs/agent-runtime/utils/openaiCompatibleFactory/index.ts
index 429ef34ac006..41c0bcdc24dd 100644
--- a/src/libs/agent-runtime/utils/openaiCompatibleFactory/index.ts
+++ b/src/libs/agent-runtime/utils/openaiCompatibleFactory/index.ts
@@ -40,6 +40,7 @@ interface OpenAICompatibleFactoryOptions<T extends Record<string, any> = any> {
       payload: ChatStreamPayload,
       options: ConstructorOptions<T>,
     ) => OpenAI.ChatCompletionCreateParamsStreaming;
+    noUserId?: boolean;
   };
   constructorOptions?: ConstructorOptions<T>;
   debug?: {
@@ -151,7 +152,10 @@ export const LobeOpenAICompatibleFactory = <T extends Record<string, any> = any>
             } as OpenAI.ChatCompletionCreateParamsStreaming);
 
         const response = await this.client.chat.completions.create(
-          { ...postPayload, user: options?.user },
+          {
+            ...postPayload,
+            ...(chatCompletion?.noUserId ? {} : { user: options?.user }) 
+          },
           {
             // https://github.com/lobehub/lobe-chat/pull/318
             headers: { Accept: '*/*' },
diff --git a/src/locales/default/modelProvider.ts b/src/locales/default/modelProvider.ts
index 89a222c462f7..8cff51d188cb 100644
--- a/src/locales/default/modelProvider.ts
+++ b/src/locales/default/modelProvider.ts
@@ -102,6 +102,23 @@ export default {
       title: '下载指定的 Ollama 模型',
     },
   },
+  spark: {
+    sparkApiKey: {
+      desc: '填入 Spark API Key',
+      placeholder: 'Spark API Key',
+      title: 'Spark API Key',
+    },
+    sparkApiSecret: {
+      desc: '填入 Spark API Secret',
+      placeholder: 'Spark API Secret',
+      title: 'Spark API Secret',
+    },
+    unlock: {
+      description:
+        '输入你的 Spark API Key / Spark API Secret 即可开始会话。应用不会记录你的鉴权配置',
+      title: '使用自定义 Spark 鉴权信息',
+    },
+  },
   zeroone: {
     title: '01.AI 零一万物',
   },
diff --git a/src/server/globalConfig/index.ts b/src/server/globalConfig/index.ts
index a12fa0d94f03..aeaa9106ff0f 100644
--- a/src/server/globalConfig/index.ts
+++ b/src/server/globalConfig/index.ts
@@ -38,6 +38,7 @@ export const getServerGlobalConfig = () => {
     ENABLED_BAICHUAN,
     ENABLED_TAICHU,
     ENABLED_AI360,
+    ENABLED_SPARK,
 
     ENABLED_AZURE_OPENAI,
     AZURE_MODEL_LIST,
@@ -112,6 +113,7 @@ export const getServerGlobalConfig = () => {
       perplexity: { enabled: ENABLED_PERPLEXITY },
       qwen: { enabled: ENABLED_QWEN },
 
+      spark: { enabled: ENABLED_SPARK },
       stepfun: { enabled: ENABLED_STEPFUN },
 
       taichu: { enabled: ENABLED_TAICHU },
diff --git a/src/services/_auth.ts b/src/services/_auth.ts
index 6e8c98b04d9f..f8f157098ee2 100644
--- a/src/services/_auth.ts
+++ b/src/services/_auth.ts
@@ -36,6 +36,15 @@ export const getProviderAuthPayload = (provider: string) => {
       return { endpoint: config?.baseURL };
     }
 
+    case ModelProvider.Spark: {
+      const config = keyVaultsConfigSelectors.sparkConfig(useUserStore.getState());
+
+      return { 
+        sparkApiKey: config?.sparkApiKey, 
+        sparkApiSecret: config?.sparkApiSecret, 
+      };
+    }
+
     default: {
       const config = keyVaultsConfigSelectors.getVaultByProvider(provider as GlobalLLMProviderKey)(
         useUserStore.getState(),
diff --git a/src/services/chat.ts b/src/services/chat.ts
index cac91db34e14..1dec2b1a9b9d 100644
--- a/src/services/chat.ts
+++ b/src/services/chat.ts
@@ -162,6 +162,13 @@ export function initializeWithClientStore(provider: string, payload: any) {
     case ModelProvider.ZeroOne: {
       break;
     }
+    case ModelProvider.Spark: {
+      providerOptions = {
+        sparkApiKey: providerAuthPayload?.sparkApiKey,
+        sparkApiSecret: providerAuthPayload?.sparkApiSecret,
+      };
+      break;
+    }
   }
 
   /**
diff --git a/src/store/user/slices/modelList/selectors/keyVaults.ts b/src/store/user/slices/modelList/selectors/keyVaults.ts
index 0a9bbb265b65..9baea979c20a 100644
--- a/src/store/user/slices/modelList/selectors/keyVaults.ts
+++ b/src/store/user/slices/modelList/selectors/keyVaults.ts
@@ -16,6 +16,7 @@ const openAIConfig = (s: UserStore) => keyVaultsSettings(s).openai || {};
 const bedrockConfig = (s: UserStore) => keyVaultsSettings(s).bedrock || {};
 const ollamaConfig = (s: UserStore) => keyVaultsSettings(s).ollama || {};
 const azureConfig = (s: UserStore) => keyVaultsSettings(s).azure || {};
+const sparkConfig = (s: UserStore) => keyVaultsSettings(s).spark || {};
 const getVaultByProvider = (provider: GlobalLLMProviderKey) => (s: UserStore) =>
   (keyVaultsSettings(s)[provider] || {}) as OpenAICompatibleKeyVault &
     AzureOpenAIKeyVault &
@@ -42,4 +43,5 @@ export const keyVaultsConfigSelectors = {
   ollamaConfig,
   openAIConfig,
   password,
+  sparkConfig,
 };
diff --git a/src/store/user/slices/modelList/selectors/modelConfig.ts b/src/store/user/slices/modelList/selectors/modelConfig.ts
index 8e2acb1421ca..926b07d4432c 100644
--- a/src/store/user/slices/modelList/selectors/modelConfig.ts
+++ b/src/store/user/slices/modelList/selectors/modelConfig.ts
@@ -69,6 +69,7 @@ const openAIConfig = (s: UserStore) => currentLLMSettings(s).openai;
 const bedrockConfig = (s: UserStore) => currentLLMSettings(s).bedrock;
 const ollamaConfig = (s: UserStore) => currentLLMSettings(s).ollama;
 const azureConfig = (s: UserStore) => currentLLMSettings(s).azure;
+const sparkConfig = (s: UserStore) => currentLLMSettings(s).spark;
 
 const isAzureEnabled = (s: UserStore) => currentLLMSettings(s).azure.enabled;
 
@@ -86,4 +87,6 @@ export const modelConfigSelectors = {
 
   ollamaConfig,
   openAIConfig,
+
+  sparkConfig,
 };
diff --git a/src/types/user/settings/keyVaults.ts b/src/types/user/settings/keyVaults.ts
index 46fc0db51254..01dd2dae4a47 100644
--- a/src/types/user/settings/keyVaults.ts
+++ b/src/types/user/settings/keyVaults.ts
@@ -15,6 +15,11 @@ export interface AWSBedrockKeyVault {
   secretAccessKey?: string;
 }
 
+export interface SparkKeyVault {
+  sparkApiKey?: string;
+  sparkApiSecret?: string;
+}
+
 export interface UserKeyVaults {
   ai360?: OpenAICompatibleKeyVault;
   anthropic?: OpenAICompatibleKeyVault;
@@ -35,6 +40,7 @@ export interface UserKeyVaults {
   password?: string;
   perplexity?: OpenAICompatibleKeyVault;
   qwen?: OpenAICompatibleKeyVault;
+  spark?: SparkKeyVault;
   stepfun?: OpenAICompatibleKeyVault;
   taichu?: OpenAICompatibleKeyVault;
   togetherai?: OpenAICompatibleKeyVault;
