diff --git a/src/config/aiModels/minimax.ts b/src/config/aiModels/minimax.ts
index d9e816663f604..f15ee6af788c5 100644
--- a/src/config/aiModels/minimax.ts
+++ b/src/config/aiModels/minimax.ts
@@ -63,12 +63,11 @@ const minimaxImageModels: AIImageModelCard[] = [
         default: '1:1',
         enum: ['1:1', '16:9', '4:3', '3:2', '2:3', '3:4', '9:16', '21:9'],
       },
-      height: { default: 1024, max: 2048, min: 512, step: 8 },
       imageUrl: { default: null },
       prompt: {
         default: '',
       },
-      width: { default: 1024, max: 2048, min: 512, step: 8 },
+      seed: { default: null },
     },
     releasedAt: '2025-02-28',
     type: 'image',
@@ -84,12 +83,10 @@ const minimaxImageModels: AIImageModelCard[] = [
         default: '1:1',
         enum: ['1:1', '16:9', '4:3', '3:2', '2:3', '3:4', '9:16', '21:9'],
       },
-      height: { default: 1024, max: 2048, min: 512, step: 8 },
-      imageUrl: { default: null },
       prompt: {
         default: '',
       },
-      width: { default: 1024, max: 2048, min: 512, step: 8 },
+      seed: { default: null },
     },
     releasedAt: '2025-02-28',
     type: 'image',
diff --git a/src/libs/model-runtime/minimax/createImage.ts b/src/libs/model-runtime/minimax/createImage.ts
index 64420e0b2cbde..5cc19feda1db8 100644
--- a/src/libs/model-runtime/minimax/createImage.ts
+++ b/src/libs/model-runtime/minimax/createImage.ts
@@ -21,66 +21,6 @@ interface MiniMaxImageResponse {
   };
 }
 
-/**
- * Convert standard image parameters to MiniMax format
- */
-function convertImageParams(params: CreateImagePayload['params']) {
-  const { height, seed, width } = params;
-
-  // Prepare the base parameters
-  const miniMaxParams: any = {
-    n: 1, // MiniMax supports 1-9 images
-    prompt: params.prompt,
-    // prompt_optimizer: true, // Enable prompt optimization by default
-    // response_format: 'url',
-  };
-
-  // Add seed if provided
-  if (seed !== undefined) {
-    miniMaxParams.seed = seed;
-  }
-
-  // Handle width/height vs aspect_ratio
-  if (width && height) {
-    // Ensure dimensions are multiples of 8 and within valid range
-    const normalizeSize = (size: number) => {
-      const clamped = Math.max(512, Math.min(2048, size));
-      return Math.round(clamped / 8) * 8; // Round to nearest multiple of 8
-    };
-    
-    const normalizedWidth = normalizeSize(width);
-    const normalizedHeight = normalizeSize(height);
-    
-    // Check if total pixels exceed 2M (recommended limit)
-    const totalPixels = normalizedWidth * normalizedHeight;
-    if (totalPixels > 2_000_000) {
-      log('Warning: Image resolution (%dx%d = %d pixels) exceeds recommended 2M pixel limit', 
-          normalizedWidth, normalizedHeight, totalPixels);
-    }
-    
-    miniMaxParams.width = normalizedWidth;
-    miniMaxParams.height = normalizedHeight;
-  } else {
-    // Use aspect_ratio if width/height not specified
-    let aspect_ratio = '1:1'; // default square
-    if (width && height) {
-      const gcd = (a: number, b: number): number => b === 0 ? a : gcd(b, a % b);
-      const divisor = gcd(width, height);
-      aspect_ratio = `${width / divisor}:${height / divisor}`;
-      
-      // Map to supported aspect ratios
-      const supportedRatios = ['1:1', '16:9', '4:3', '3:2', '2:3', '3:4', '9:16', '21:9'];
-      if (!supportedRatios.includes(aspect_ratio)) {
-        aspect_ratio = '1:1'; // fallback to square
-        log('Unsupported aspect ratio %s, falling back to 1:1', aspect_ratio);
-      }
-    }
-    miniMaxParams.aspect_ratio = aspect_ratio;
-  }
-  
-  return miniMaxParams;
-}
-
 /**
  * Create image using MiniMax API
  */
@@ -90,23 +30,18 @@ export async function createMiniMaxImage(
 ): Promise<CreateImageResponse> {
   const { apiKey, provider } = options;
   const { model, params } = payload;
-  
+
   try {
     const endpoint = 'https://api.minimaxi.com/v1/image_generation';
-    
-    // Convert parameters to MiniMax format
-    const miniMaxParams = convertImageParams(params);
-    
-    log('Creating image with MiniMax model: %s', model);
-    log('Parameters: %O', miniMaxParams);
-
-    const requestBody = {
-      model: model || 'image-01', // Default to image-01 if no model specified
-      ...miniMaxParams,
-    };
 
     const response = await fetch(endpoint, {
-      body: JSON.stringify(requestBody),
+      body: JSON.stringify({
+        aspect_ratio: params.aspectRatio,
+        model,
+        n: 1,
+        prompt: params.prompt,
+        ...(params.seed !== undefined ? { seed: params.seed } : {}),
+      }),
       headers: {
         'Authorization': `Bearer ${apiKey}`,
         'Content-Type': 'application/json',
@@ -121,20 +56,20 @@ export async function createMiniMaxImage(
       } catch {
         // Failed to parse JSON error response
       }
-      
+
       // Check if it's a MiniMax error response format
       const errorMessage = errorData?.base_resp?.status_msg || 
                           errorData?.error?.message || 
                           errorData?.message || 
                           response.statusText;
-      
+
       throw new Error(
         `MiniMax API error (${response.status}): ${errorMessage}`
       );
     }
 
     const data: MiniMaxImageResponse = await response.json();
-    
+
     log('Image generation response: %O', data);
 
     // Check API response status
@@ -154,7 +89,7 @@ export async function createMiniMaxImage(
 
     // Return the first generated image URL
     const imageUrl = data.data.image_urls[0];
-    
+
     if (!imageUrl) {
       throw new Error('No valid image URL in response');
     }
