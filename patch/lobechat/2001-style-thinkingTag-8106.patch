diff --git a/src/services/chat.ts b/src/services/chat.ts
index 76b7941ba50d5..553afe3aa3f54 100644
--- a/src/services/chat.ts
+++ b/src/services/chat.ts
@@ -42,6 +42,7 @@ import { FetchSSEOptions, fetchSSE, getMessageError } from '@/utils/fetch';
 import { genToolCallingName } from '@/utils/toolCall';
 import { createTraceHeader, getTraceId } from '@/utils/trace';
 import { parsePlaceholderVariablesMessages } from '@/utils/client/parserPlaceholder';
+import { removeThinkingTagsMessages } from '@/utils/client/cleanupThinking';
 
 import { createHeaderWithAuth, createPayloadWithKeyVaults } from './_auth';
 import { API_ENDPOINTS } from './_url';
@@ -194,10 +195,13 @@ class ChatService {
       pluginIds.push(WebBrowsingManifest.identifier);
     }
 
-    // ============  1. preprocess placeholder variables   ============ //
-    const parsedMessages = parsePlaceholderVariablesMessages(messages);
+    // ============  1. preprocess thinking tag   ============ //
+    const noThinkingMessages = removeThinkingTagsMessages(messages);
 
-    // ============  2. preprocess messages   ============ //
+    // ============  2. preprocess placeholder variables   ============ //
+    const parsedMessages = parsePlaceholderVariablesMessages(noThinkingMessages);
+
+    // ============  3. preprocess messages   ============ //
 
     const oaiMessages = this.processMessages(
       {
@@ -209,14 +213,14 @@ class ChatService {
       options,
     );
 
-    // ============  3. preprocess tools   ============ //
+    // ============  4. preprocess tools   ============ //
 
     const tools = this.prepareTools(pluginIds, {
       model: payload.model,
       provider: payload.provider!,
     });
 
-    // ============  4. process extend params   ============ //
+    // ============  5. process extend params   ============ //
 
     let extendParams: Record<string, any> = {};
 
diff --git a/src/utils/client/cleanupThinking.test.ts b/src/utils/client/cleanupThinking.test.ts
new file mode 100644
index 0000000000000..3a149bfc5dbd9
--- /dev/null
+++ b/src/utils/client/cleanupThinking.test.ts
@@ -0,0 +1,226 @@
+import { describe, it, expect } from 'vitest';
+import { removeThinkingTagsMessages } from './cleanupThinking';
+
+describe('removeThinkingTagsMessages', () => {
+  it('should remove thinking tags from assistant string content', () => {
+    const messages = [
+      {
+        role: 'assistant',
+        content: '<think>Let me think about this...</think>Here is my response.'
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    expect(result[0].content).toBe('Here is my response.');
+  });
+
+  it('should remove multiple thinking tags from assistant string content', () => {
+    const messages = [
+      {
+        role: 'assistant',
+        content: '<think>First thought</think>Response part 1<think>Second thought</think>Response part 2'
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    expect(result[0].content).toBe('Response part 1Response part 2');
+  });
+
+  it('should remove thinking tags with multiline content', () => {
+    const messages = [
+      {
+        role: 'assistant',
+        content: '<think>\nThis is a multiline\nthinking process\nwith newlines\n</think>Final answer here.'
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    expect(result[0].content).toBe('Final answer here.');
+  });
+
+  it('should remove thinking tags from assistant array content', () => {
+    const messages = [
+      {
+        role: 'assistant',
+        content: [
+          {
+            type: 'text',
+            text: '<think>Processing...</think>Here is the text response.'
+          },
+          {
+            type: 'image', 
+            url: 'https://example.com/image.jpg'
+          }
+        ]
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    expect(result[0].content[0].text).toBe('Here is the text response.');
+    expect(result[0].content[1]).toEqual({
+      type: 'image',
+      url: 'https://example.com/image.jpg'
+    });
+  });
+
+  it('should not modify user messages', () => {
+    const messages = [
+      {
+        role: 'user',
+        content: '<think>This should not be removed</think>User message content.'
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    expect(result[0].content).toBe('<think>This should not be removed</think>User message content.');
+  });
+
+  it('should not modify system messages', () => {
+    const messages = [
+      {
+        role: 'system',
+        content: '<think>System thinking</think>System prompt here.'
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    expect(result[0].content).toBe('<think>System thinking</think>System prompt here.');
+  });
+
+  it('should handle messages without content', () => {
+    const messages = [
+      {
+        role: 'assistant'
+      },
+      {
+        role: 'assistant',
+        content: null
+      },
+      {
+        role: 'assistant',
+        content: undefined
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    expect(result).toHaveLength(3);
+    expect(result[0]).toEqual({ role: 'assistant' });
+    expect(result[1]).toEqual({ role: 'assistant', content: null });
+    expect(result[2]).toEqual({ role: 'assistant', content: undefined });
+  });
+
+  it('should handle empty thinking tags', () => {
+    const messages = [
+      {
+        role: 'assistant',
+        content: '<think></think>Response without thinking content.'
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    expect(result[0].content).toBe('Response without thinking content.');
+  });
+
+  it('should handle content with only thinking tags', () => {
+    const messages = [
+      {
+        role: 'assistant',
+        content: '<think>Only thinking content here</think>'
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    expect(result[0].content).toBe('');
+  });
+
+  it('should preserve other HTML-like tags', () => {
+    const messages = [
+      {
+        role: 'assistant',
+        content: '<think>Remove this</think><div>Keep this</div><span>And this</span>'
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    expect(result[0].content).toBe('<div>Keep this</div><span>And this</span>');
+  });
+
+  it('should handle nested thinking tags correctly', () => {
+    const messages = [
+      {
+        role: 'assistant',
+        content: '<think>Outer thinking</think><think>Another thinking</think>Final response.'
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    // 由于使用非贪婪匹配，每个 think 标签会被单独移除
+    expect(result[0].content).toBe('Final response.');
+  });
+
+  it('should handle mixed content types in array', () => {
+    const messages = [
+      {
+        role: 'assistant',
+        content: [
+          {
+            type: 'text',
+            text: '<think>First thinking</think>First text'
+          },
+          {
+            type: 'code',
+            language: 'javascript',
+            code: 'console.log("hello");'
+          },
+          {
+            type: 'text',
+            text: '<think>Second thinking</think>Second text'
+          }
+        ]
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    expect(result[0].content[0].text).toBe('First text');
+    expect(result[0].content[1]).toEqual({
+      type: 'code',
+      language: 'javascript', 
+      code: 'console.log("hello");'
+    });
+    expect(result[0].content[2].text).toBe('Second text');
+  });
+
+  it('should preserve message structure and other properties', () => {
+    const messages = [
+      {
+        id: 'msg-123',
+        role: 'assistant',
+        content: '<think>Remove this</think>Keep this response.',
+        timestamp: 1234567890,
+        metadata: { model: 'glm-z1-flash' }
+      }
+    ];
+
+    const result = removeThinkingTagsMessages(messages);
+
+    expect(result[0]).toEqual({
+      id: 'msg-123',
+      role: 'assistant',
+      content: 'Keep this response.',
+      timestamp: 1234567890,
+      metadata: { model: 'glm-z1-flash' }
+    });
+  });
+});
diff --git a/src/utils/client/cleanupThinking.ts b/src/utils/client/cleanupThinking.ts
new file mode 100644
index 0000000000000..e9cc1a33cbe87
--- /dev/null
+++ b/src/utils/client/cleanupThinking.ts
@@ -0,0 +1,48 @@
+const thinkingTagRegex = /<think>[\S\s]*?<\/think>/g;
+
+/**
+ * 移除文本中的 <think></think> 标签及其内容
+ * @param text 包含 thinking 标签的字符串
+ * @returns 移除标签后的文本
+ */
+const removeThinkingTags = (text: string): string => {
+  return text.replace(thinkingTagRegex, '').trim();
+};
+
+/**
+ * 解析消息内容，从 assistant 角色的消息中移除 <think></think> 标签及其内容
+ * @param messages 原始消息数组
+ * @returns 处理后的消息数组
+ */
+export const removeThinkingTagsMessages = (messages: any[]): any[] =>
+  messages.map(message => {
+    // 只处理 assistant 角色的消息
+    if (message?.role !== 'assistant' || !message?.content) return message;
+
+    const { content } = message;
+
+    // 字符串类型直接处理
+    if (typeof content === 'string') {
+      return { 
+        ...message, 
+        content: removeThinkingTags(content)
+      };
+    }
+
+    // 数组类型处理其中的 text 元素
+    if (Array.isArray(content)) {
+      return {
+        ...message,
+        content: content.map(item => 
+          item?.type === 'text' 
+            ? { 
+                ...item, 
+                text: removeThinkingTags(item.text)
+              }
+            : item
+        )
+      };
+    }
+
+    return message;
+  });
