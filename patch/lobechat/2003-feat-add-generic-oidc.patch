diff --git a/src/config/auth.ts b/src/config/auth.ts
index 0dbbd06123a7..fa28c94e9a0e 100644
--- a/src/config/auth.ts
+++ b/src/config/auth.ts
@@ -90,6 +90,11 @@ export const getAuthConfig = () => {
       CLOUDFLARE_ZERO_TRUST_CLIENT_ID: z.string().optional(),
       CLOUDFLARE_ZERO_TRUST_CLIENT_SECRET: z.string().optional(),
       CLOUDFLARE_ZERO_TRUST_ISSUER: z.string().optional(),
+
+      // Generic OIDC
+      GENERIC_OIDC_CLIENT_ID: z.string().optional(),
+      GENERIC_OIDC_CLIENT_SECRET: z.string().optional(),
+      GENERIC_OIDC_ISSUER: z.string().optional(),
       
       // ZITADEL
       ZITADEL_CLIENT_ID: z.string().optional(),
@@ -142,6 +147,11 @@ export const getAuthConfig = () => {
       CLOUDFLARE_ZERO_TRUST_CLIENT_ID: process.env.CLOUDFLARE_ZERO_TRUST_CLIENT_ID,
       CLOUDFLARE_ZERO_TRUST_CLIENT_SECRET: process.env.CLOUDFLARE_ZERO_TRUST_CLIENT_SECRET,
       CLOUDFLARE_ZERO_TRUST_ISSUER: process.env.CLOUDFLARE_ZERO_TRUST_ISSUER,
+
+      // Generic OIDC
+      GENERIC_OIDC_CLIENT_ID: process.env.GENERIC_OIDC_CLIENT_ID,
+      GENERIC_OIDC_CLIENT_SECRET: process.env.GENERIC_OIDC_CLIENT_SECRET,
+      GENERIC_OIDC_ISSUER: process.env.GENERIC_OIDC_ISSUER,
       
       // ZITADEL
       ZITADEL_CLIENT_ID: process.env.ZITADEL_CLIENT_ID,
diff --git a/src/libs/next-auth/sso-providers/generic-oidc.ts b/src/libs/next-auth/sso-providers/generic-oidc.ts
new file mode 100644
index 000000000000..7f06f37ef0e4
--- /dev/null
+++ b/src/libs/next-auth/sso-providers/generic-oidc.ts
@@ -0,0 +1,46 @@
+import { OIDCConfig, OIDCUserConfig } from '@auth/core/providers';
+
+import { authEnv } from '@/config/auth';
+
+import { CommonProviderConfig } from './sso.config';
+
+interface GenericOIDCProfile extends Record<string, any> {
+  email: string;
+  id: string;
+  name?: string;
+  picture?: string;
+  sub: string;
+  username?: string;
+}
+
+function LobeGenericOIDCProvider(config: OIDCUserConfig<GenericOIDCProfile>): OIDCConfig<GenericOIDCProfile> {
+  return {
+    ...CommonProviderConfig,
+    ...config,
+    id: 'generic-oidc',
+    name: 'Generic OIDC',
+    profile(profile) {
+      return {
+        email: profile.email,
+        id: profile.sub,
+        image: profile.picture ? profile.picture : undefined,
+        name: profile.name ?? profile.username ?? profile.email,
+        providerAccountId: profile.sub,
+      };
+    },
+    type: 'oidc',
+  };
+}
+
+const provider = {
+  id: 'generic-oidc',
+  provider: LobeGenericOIDCProvider({
+    authorization: { params: { scope: 'email offline_access openid profile' } }, // exclude: address, phone
+    checks: ['pkce', 'state'],
+    clientId: authEnv.GENERIC_OIDC_CLIENT_ID,
+    clientSecret: authEnv.GENERIC_OIDC_CLIENT_SECRET,
+    issuer: authEnv.GENERIC_OIDC_ISSUER,
+  }),
+};
+
+export default provider;
diff --git a/src/libs/next-auth/sso-providers/index.ts b/src/libs/next-auth/sso-providers/index.ts
index 1b97ec38d6ad..d0acf731bf9b 100644
--- a/src/libs/next-auth/sso-providers/index.ts
+++ b/src/libs/next-auth/sso-providers/index.ts
@@ -3,8 +3,9 @@ import Authelia from './authelia';
 import Authentik from './authentik';
 import AzureAD from './azure-ad';
 import CloudflareZeroTrust from './cloudflare-zero-trust';
+import GenericOIDC from './generic-oidc';
 import Github from './github';
 import Logto from './logto';
 import Zitadel from './zitadel';
 
-export const ssoProviders = [Auth0, Authentik, AzureAD, Github, Zitadel, Authelia, Logto, CloudflareZeroTrust];
\ No newline at end of file
+export const ssoProviders = [Auth0, Authentik, AzureAD, GenericOIDC, Github, Zitadel, Authelia, Logto, CloudflareZeroTrust];
