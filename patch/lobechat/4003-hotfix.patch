diff --git a/src/libs/agent-runtime/github/index.ts b/src/libs/agent-runtime/github/index.ts
index 3728eb6efcce2..7552b98b5aa0b 100644
--- a/src/libs/agent-runtime/github/index.ts
+++ b/src/libs/agent-runtime/github/index.ts
@@ -13,7 +13,7 @@ export interface GithubModelCard {
   name: string;
   tags: string[];
   task: string;
-};
+}
 
 /* eslint-enable typescript-sort-keys/interface */
 
diff --git a/src/libs/agent-runtime/togetherai/index.test.ts b/src/libs/agent-runtime/togetherai/index.test.ts
index dd00ac5912e79..0ff9085c4c5d6 100644
--- a/src/libs/agent-runtime/togetherai/index.test.ts
+++ b/src/libs/agent-runtime/togetherai/index.test.ts
@@ -297,17 +297,4 @@ describe('LobeTogetherAI', () => {
       });
     });
   });
-
-  describe('models', () => {
-    it('should get models', async () => {
-      vi.spyOn(globalThis, 'fetch').mockResolvedValueOnce({
-        json: async () => models,
-        ok: true,
-      } as Response);
-
-      const list = await instance.models();
-
-      expect(list).toMatchSnapshot();
-    });
-  });
 });
diff --git a/src/libs/agent-runtime/togetherai/index.ts b/src/libs/agent-runtime/togetherai/index.ts
index 0175b66883e71..1515c751d8b5d 100644
--- a/src/libs/agent-runtime/togetherai/index.ts
+++ b/src/libs/agent-runtime/togetherai/index.ts
@@ -1,12 +1,12 @@
-import { LOBE_DEFAULT_MODEL_LIST } from '@/config/modelProviders';
-
 import { ModelProvider } from '../types';
 import { LobeOpenAICompatibleFactory } from '../utils/openaiCompatibleFactory';
 import { TogetherAIModel } from './type';
 
-const baseURL = 'https://api.together.xyz';
+import { LOBE_DEFAULT_MODEL_LIST } from '@/config/aiModels';
+import type { ChatModelCard } from '@/types/llm';
+
 export const LobeTogetherAI = LobeOpenAICompatibleFactory({
-  baseURL: `${baseURL}/v1`,
+  baseURL: 'https://api.together.xyz/v1',
   constructorOptions: {
     defaultHeaders: {
       'HTTP-Referer': 'https://chat-preview.lobehub.com',
@@ -17,16 +17,6 @@ export const LobeTogetherAI = LobeOpenAICompatibleFactory({
     chatCompletion: () => process.env.DEBUG_TOGETHERAI_CHAT_COMPLETION === '1',
   },
   models: async ({ client }) => {
-    const apiKey = client.apiKey;
-    const data = await fetch(`${baseURL}/api/models`, {
-      headers: {
-        Authorization: `Bearer ${apiKey}`,
-      },
-    });
-    if (!data.ok) {
-      throw new Error(`Together Fetch Error: ${data.statusText || data.status}`);
-    }
-
     const visionKeywords = [
       'qvq',
       'vision',
@@ -37,9 +27,12 @@ export const LobeTogetherAI = LobeOpenAICompatibleFactory({
       'qwq',
     ];
 
-    const models: TogetherAIModel[] = await data.json();
+    client.baseURL = 'https://api.together.xyz/api';
+
+    const modelsPage = await client.models.list() as any;
+    const modelList: TogetherAIModel[] = modelsPage.body;
 
-    return models
+    return modelList
       .map((model) => {
         return {
           contextWindowTokens: LOBE_DEFAULT_MODEL_LIST.find((m) => model.name === m.id)?.contextWindowTokens ?? undefined,
@@ -53,7 +46,8 @@ export const LobeTogetherAI = LobeOpenAICompatibleFactory({
           tokens: model.context_length,
           vision: model.description?.toLowerCase().includes('vision') || visionKeywords.some(keyword => model.name?.toLowerCase().includes(keyword)),
         };
-      });
+      })
+      .filter(Boolean) as ChatModelCard[];
   },
   provider: ModelProvider.TogetherAI,
 });
