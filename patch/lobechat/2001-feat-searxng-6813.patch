diff --git a/src/server/modules/SearXNG.ts b/src/server/modules/SearXNG.ts
index d2f5872bbce07..e974aaabfd053 100644
--- a/src/server/modules/SearXNG.ts
+++ b/src/server/modules/SearXNG.ts
@@ -10,12 +10,13 @@ export class SearXNGClient {
     this.baseUrl = baseUrl;
   }
 
-  async search(query: string, engines?: string[]): Promise<SearchResponse> {
+  async search(query: string, engines?: string[], time_range?: string): Promise<SearchResponse> {
     try {
       const searchParams = qs.stringify({
         engines: engines?.join(','),
         format: 'json',
         q: query,
+        time_range: time_range,
       });
 
       const response = await fetch(urlJoin(this.baseUrl, `/search?${searchParams}`));
diff --git a/src/server/routers/tools/search.ts b/src/server/routers/tools/search.ts
index 96bb14f205af6..a5912cd99c10b 100644
--- a/src/server/routers/tools/search.ts
+++ b/src/server/routers/tools/search.ts
@@ -38,6 +38,7 @@ export const searchRouter = router({
       z.object({
         query: z.string(),
         searchEngine: z.array(z.string()).optional(),
+        searchTimeRange: z.string().optional(),
       }),
     )
     .query(async ({ input }) => {
@@ -48,7 +49,7 @@ export const searchRouter = router({
       const client = new SearXNGClient(toolsEnv.SEARXNG_URL);
 
       try {
-        return await client.search(input.query, input.searchEngine);
+        return await client.search(input.query, input.searchEngine, input.searchTimeRange);
       } catch (e) {
         console.error(e);
 
diff --git a/src/services/search.ts b/src/services/search.ts
index 382979b452d31..50c404ca4f14d 100644
--- a/src/services/search.ts
+++ b/src/services/search.ts
@@ -1,8 +1,8 @@
 import { toolsClient } from '@/libs/trpc/client';
 
 class SearchService {
-  search(query: string, searchEngine?: string[]) {
-    return toolsClient.search.query.query({ query, searchEngine });
+  search(query: string, searchEngine?: string[], searchTimeRange?: string) {
+    return toolsClient.search.query.query({ query, searchEngine, searchTimeRange });
   }
 
   crawlPage(url: string) {
diff --git a/src/store/chat/slices/builtinTool/actions/searXNG.test.ts b/src/store/chat/slices/builtinTool/actions/searXNG.test.ts
index d95215d26dd4a..22ae559fdd6fd 100644
--- a/src/store/chat/slices/builtinTool/actions/searXNG.test.ts
+++ b/src/store/chat/slices/builtinTool/actions/searXNG.test.ts
@@ -88,7 +88,7 @@ describe('searXNG actions', () => {
         },
       ];
 
-      expect(searchService.search).toHaveBeenCalledWith('test query', ['google']);
+      expect(searchService.search).toHaveBeenCalledWith('test query', ['google'], undefined);
       expect(result.current.searchLoading[messageId]).toBe(false);
       expect(result.current.internal_updateMessageContent).toHaveBeenCalledWith(
         messageId,
@@ -143,6 +143,7 @@ describe('searXNG actions', () => {
       const query: SearchQuery = {
         query: 'test query',
         searchEngines: ['custom-engine'],
+        searchTimeRange: 'year',
       };
 
       await act(async () => {
@@ -150,7 +151,7 @@ describe('searXNG actions', () => {
       });
 
       expect(searchService.search).toHaveBeenCalledTimes(2);
-      expect(searchService.search).toHaveBeenNthCalledWith(1, 'test query', ['custom-engine']);
+      expect(searchService.search).toHaveBeenNthCalledWith(1, 'test query', ['custom-engine'], 'year');
       expect(searchService.search).toHaveBeenNthCalledWith(2, 'test query');
       expect(result.current.updatePluginArguments).toHaveBeenCalledWith(messageId, {
         query: 'test query',
diff --git a/src/store/chat/slices/builtinTool/actions/searXNG.ts b/src/store/chat/slices/builtinTool/actions/searXNG.ts
index 28b85d9d9573c..162ef6bfdf933 100644
--- a/src/store/chat/slices/builtinTool/actions/searXNG.ts
+++ b/src/store/chat/slices/builtinTool/actions/searXNG.ts
@@ -141,12 +141,12 @@ export const searchSlice: StateCreator<
     get().toggleSearchLoading(id, true);
     let data: SearchResponse | undefined;
     try {
-      data = await searchService.search(params.query, params.searchEngines);
+      data = await searchService.search(params.query, params.searchEngines, params.searchTimeRange);
 
       // 如果没有搜索到结果，那么尝试使用默认的搜索引擎再搜一次
-      if (data?.results.length === 0 && params.searchEngines && params.searchEngines?.length > 0) {
+      if (data?.results.length === 0 && (params.searchEngines && params.searchEngines?.length > 0 || params.searchTimeRange)) {
         data = await searchService.search(params.query);
-        get().updatePluginArguments(id, { ...params, searchEngines: undefined });
+        get().updatePluginArguments(id, { ...params, searchEngines: undefined, searchTimeRange: undefined });
       }
 
       await get().updatePluginState(id, data);
diff --git a/src/tools/web-browsing/index.ts b/src/tools/web-browsing/index.ts
index 7e32a75a70932..03c9432739d98 100644
--- a/src/tools/web-browsing/index.ts
+++ b/src/tools/web-browsing/index.ts
@@ -19,13 +19,14 @@ export const WebBrowsingManifest: BuiltinToolManifest = {
       parameters: {
         properties: {
           query: {
-            description: 'The search query',
+            description: '(required) [string] The search query.',
             type: 'string',
           },
           searchEngines: {
-            description: 'The search engine you can use:',
+            description: '(optional) [array] Specifies the active search engines or categories.',
             items: {
               enum: [
+                // Engines
                 'google',
                 'bilibili',
                 'bing',
@@ -44,11 +45,32 @@ export const WebBrowsingManifest: BuiltinToolManifest = {
                 'unsplash',
                 'vimeo',
                 'youtube',
+                // Categories
+                'files',
+                'general',
+                'images',
+                'it',
+                'map',
+                'music',
+                'news',
+                'science',
+                'social_media',
+                'videos',
               ],
               type: 'string',
             },
             type: 'array',
           },
+          searchTimeRange: {
+            description: "(optional) [string] Specifies time range of search results.",
+            enum: [
+              'day',
+              'week',
+              'month',
+              'year',
+            ],
+            type: 'string'
+          },
         },
         required: ['query'],
         type: 'object',
diff --git a/src/tools/web-browsing/systemRole.ts b/src/tools/web-browsing/systemRole.ts
index 1a960d0476fcd..292c34dbf0c6f 100644
--- a/src/tools/web-browsing/systemRole.ts
+++ b/src/tools/web-browsing/systemRole.ts
@@ -31,8 +31,26 @@ Choose search engines based on the query type:
 - Images: unsplash, pinterest
 - Entertainment: imdb, reddit
 - For region-specific information, prefer search engines popular in that region
+
+It's a good choice to use the following categories to search across all relevant engines if you need to broaden the range of search or are unsure about which specific engine to use:  
+- General information: general
+- News: news
+- Academic/scientific research: science
+- Technical/IT-related queries: it
+- Multimedia content: images, videos, music
+- Geographic/map-related searches: map
+- File searches: files
+- Social trends and discussions: social_media
 </search_engine_selection>
 
+<search_time_range_selection>
+Only specify a time range if the query is time-sensitive:
+- For the latest updates: day
+- For recent developments: week
+- For ongoing trends or updates: month
+- For long-term insights: year
+</search_time_range_selection>
+
 <citation_requirements>
 - Always cite sources using markdown footnote format (e.g., [^1])
 - List all referenced URLs at the end of your response
diff --git a/src/types/tool/search.ts b/src/types/tool/search.ts
index 66e7314f2aa66..248d9f444310a 100644
--- a/src/types/tool/search.ts
+++ b/src/types/tool/search.ts
@@ -1,6 +1,7 @@
 export interface SearchQuery {
   query: string;
   searchEngines?: string[];
+  searchTimeRange?: string;
 }
 
 export const SEARCH_SEARXNG_NOT_CONFIG = 'SearXNG is not configured';
@@ -22,12 +23,14 @@ export interface SearchResult {
   engine: string;
   engines: string[];
   iframe_src?: string;
+  img_src?: string;
   parsed_url: string[];
   positions: number[];
   publishedDate?: string | null;
   score: number;
   template: string;
   thumbnail?: string | null;
+  thumbnail_src?: string;
   title: string;
   url: string;
 }
