diff --git a/src/hooks/useModelSupportReasoning.ts b/src/hooks/useModelSupportReasoning.ts
new file mode 100644
index 0000000000000..fdbdf5e01b762
--- /dev/null
+++ b/src/hooks/useModelSupportReasoning.ts
@@ -0,0 +1,15 @@
+import { isDeprecatedEdition } from '@/const/version';
+import { aiModelSelectors, useAiInfraStore } from '@/store/aiInfra';
+import { useUserStore } from '@/store/user';
+import { modelProviderSelectors } from '@/store/user/selectors';
+
+export const useModelSupportReasoning = (model: string, provider: string) => {
+  const newValue = useAiInfraStore(aiModelSelectors.isModelSupportReasoning(model, provider));
+
+  // TODO: remove this in V2.0
+  const oldValue = useUserStore(modelProviderSelectors.isModelEnabledReasoning(model));
+  if (isDeprecatedEdition) return oldValue;
+  //
+
+  return newValue;
+};
diff --git a/src/store/aiInfra/slices/aiModel/selectors.ts b/src/store/aiInfra/slices/aiModel/selectors.ts
index bd6030d77d163..9c9915a393b4a 100644
--- a/src/store/aiInfra/slices/aiModel/selectors.ts
+++ b/src/store/aiInfra/slices/aiModel/selectors.ts
@@ -48,6 +48,12 @@ const isModelSupportVision = (id: string, provider: string) => (s: AIProviderSto
   return model?.abilities?.vision;
 };
 
+const isModelSupportReasoning = (id: string, provider: string) => (s: AIProviderStoreState) => {
+  const model = getEnabledModelById(id, provider)(s);
+
+  return model?.abilities?.reasoning;
+};
+
 const isModelHasContextWindowToken =
   (id: string, provider: string) => (s: AIProviderStoreState) => {
     const model = getEnabledModelById(id, provider)(s);
@@ -71,6 +77,7 @@ export const aiModelSelectors = {
   isModelEnabled,
   isModelHasContextWindowToken,
   isModelLoading,
+  isModelSupportReasoning,
   isModelSupportToolUse,
   isModelSupportVision,
   modelContextWindowTokens,
diff --git a/src/store/user/slices/modelList/selectors/modelProvider.ts b/src/store/user/slices/modelList/selectors/modelProvider.ts
index cf0c71f67243a..84733a2838c60 100644
--- a/src/store/user/slices/modelList/selectors/modelProvider.ts
+++ b/src/store/user/slices/modelList/selectors/modelProvider.ts
@@ -122,6 +122,9 @@ const isModelEnabledFunctionCall = (id: string) => (s: UserStore) =>
 const isModelEnabledVision = (id: string) => (s: UserStore) =>
   getModelCardById(id)(s)?.vision || id.includes('vision');
 
+const isModelEnabledReasoning = (id: string) => (s: UserStore) =>
+  getModelCardById(id)(s)?.reasoning || false;
+
 const isModelEnabledFiles = (id: string) => (s: UserStore) => getModelCardById(id)(s)?.files;
 
 const isModelEnabledUpload = (id: string) => (s: UserStore) =>
@@ -144,6 +147,7 @@ export const modelProviderSelectors = {
   getModelCardsById,
   isModelEnabledFiles,
   isModelEnabledFunctionCall,
+  isModelEnabledReasoning,
   isModelEnabledUpload,
   isModelEnabledVision,
   isModelHasMaxToken,
diff --git a/src/types/llm.ts b/src/types/llm.ts
index 7230e77a5ed98..0ad147d22f1fa 100644
--- a/src/types/llm.ts
+++ b/src/types/llm.ts
@@ -42,6 +42,15 @@ export interface ChatModelCard {
   legacy?: boolean;
   maxOutput?: number;
   pricing?: ChatModelPricing;
+
+  /**
+   *  whether model supports reasoning
+   */
+  reasoning?: boolean;
+
+  /**
+   * whether model is legacy (deprecated but not removed yet)
+   */
   releasedAt?: string;
 
   /**
diff --git a/src/utils/_deprecated/parseModels.ts b/src/utils/_deprecated/parseModels.ts
index c6800b4cc6b6e..8cd61e0a2151d 100644
--- a/src/utils/_deprecated/parseModels.ts
+++ b/src/utils/_deprecated/parseModels.ts
@@ -61,10 +61,7 @@ export const parseModelString = (modelString: string = '', withDeploymentName =
       for (const capability of capabilityList) {
         switch (capability) {
           case 'reasoning': {
-            /*
-            * skip warning for reasoning
             model.reasoning = true;
-            */
             break;
           }
           case 'vision': {
