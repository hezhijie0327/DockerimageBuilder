diff --git a/src/libs/agent-runtime/cloudflare/index.ts b/src/libs/agent-runtime/cloudflare/index.ts
index 35e68ec706f89..ce30df82958e2 100644
--- a/src/libs/agent-runtime/cloudflare/index.ts
+++ b/src/libs/agent-runtime/cloudflare/index.ts
@@ -131,7 +131,7 @@ export class LobeCloudflareAI implements LobeRuntimeAI {
           contextWindowTokens: model.properties?.max_total_tokens
             ? Number(model.properties.max_total_tokens)
             : LOBE_DEFAULT_MODEL_LIST.find((m) => model.name === m.id)?.contextWindowTokens ?? undefined,
-          displayName: LOBE_DEFAULT_MODEL_LIST.find((m) => model.name === m.id)?.displayName ?? undefined,
+          displayName: LOBE_DEFAULT_MODEL_LIST.find((m) => model.name === m.id)?.displayName ?? (model.properties?.["beta"] === "true" ? `${model.name} (Beta)` : undefined),
           enabled: LOBE_DEFAULT_MODEL_LIST.find((m) => model.name === m.id)?.enabled || false,
           functionCall: model.description.toLowerCase().includes('function call') || model.properties?.["function_calling"] === "true",
           id: model.name,
diff --git a/src/libs/agent-runtime/utils/cloudflareHelpers.ts b/src/libs/agent-runtime/utils/cloudflareHelpers.ts
index 5fd596f4c7c57..109ae8d157c19 100644
--- a/src/libs/agent-runtime/utils/cloudflareHelpers.ts
+++ b/src/libs/agent-runtime/utils/cloudflareHelpers.ts
@@ -32,7 +32,6 @@ class CloudflareStreamTransformer {
   }
 }
 
-const CF_PROPERTY_NAME = 'property_id';
 const DEFAULT_BASE_URL_PREFIX = 'https://api.cloudflare.com';
 
 function fillUrl(accountID: string): string {
@@ -57,78 +56,9 @@ function desensitizeCloudflareUrl(url: string): string {
   }
 }
 
-function getModelBeta(model: any): boolean {
-  try {
-    const betaProperty = model['properties'].filter(
-      (property: any) => property[CF_PROPERTY_NAME] === 'beta',
-    );
-    if (betaProperty.length === 1) {
-      return betaProperty[0]['value'] === 'true'; // This is a string now.
-    }
-    return false;
-  } catch {
-    return false;
-  }
-}
-
-function getModelDisplayName(model: any, beta: boolean): string {
-  const modelId = model['name'];
-  let name = modelId.split('/').at(-1)!;
-  if (beta) {
-    name += ' (Beta)';
-  }
-  return name;
-}
-
-// eslint-disable-next-line @typescript-eslint/no-unused-vars, unused-imports/no-unused-vars
-function getModelFunctionCalling(model: any): boolean {
-  try {
-    const fcProperty = model['properties'].filter(
-      (property: any) => property[CF_PROPERTY_NAME] === 'function_calling',
-    );
-    if (fcProperty.length === 1) {
-      return fcProperty[0]['value'] === 'true';
-    }
-    return false;
-  } catch {
-    return false;
-  }
-}
-
-function getModelTokens(model: any): number | undefined {
-  try {
-    const tokensProperty = model['properties'].filter(
-      (property: any) => property[CF_PROPERTY_NAME] === 'max_total_tokens',
-    );
-    if (tokensProperty.length === 1) {
-      return parseInt(tokensProperty[0]['value']);
-    }
-    return undefined;
-  } catch {
-    return undefined;
-  }
-}
-
-function convertModelManifest(model: any) {
-  const modelBeta = getModelBeta(model);
-  return {
-    description: model['description'],
-    displayName: getModelDisplayName(model, modelBeta),
-    enabled: !modelBeta,
-    functionCall: false, //getModelFunctionCalling(model),
-    id: model['name'],
-    tokens: getModelTokens(model),
-  };
-}
-
 export {
   CloudflareStreamTransformer,
-  convertModelManifest,
   DEFAULT_BASE_URL_PREFIX,
   desensitizeCloudflareUrl,
   fillUrl,
-  getModelBeta,
-  getModelDisplayName,
-  getModelFunctionCalling,
-  getModelTokens,
 };
