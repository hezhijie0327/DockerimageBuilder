diff --git a/src/server/modules/SearXNG.ts b/src/server/modules/SearXNG.ts
index 9bc6000cef5ea..7550897aec81c 100644
--- a/src/server/modules/SearXNG.ts
+++ b/src/server/modules/SearXNG.ts
@@ -10,13 +10,17 @@ export class SearXNGClient {
     this.baseUrl = baseUrl;
   }
 
-  async search(query: string, engines?: string[], time_range?: string): Promise<SearchResponse> {
+  async search(query: string, optionalParams: Record<string, any> = {}): Promise<SearchResponse> {
     try {
+      const formatParams = Object.entries(optionalParams).reduce<Record<string, any>>((acc, [key, value]) => {
+        acc[key] = Array.isArray(value) ? value.join(',') : value;
+        return acc;
+      }, {});
+
       const searchParams = qs.stringify({
-        engines: engines?.join(','),
+        ...formatParams,
         format: 'json',
         q: query,
-        ...( time_range !== 'anytime' ? { time_range: time_range } : {} ),
       });
 
       const response = await fetch(urlJoin(this.baseUrl, `/search?${searchParams}`));
diff --git a/src/server/routers/tools/__test__/search.test.ts b/src/server/routers/tools/__test__/search.test.ts
index a621f19d93a46..b87a07d516bd8 100644
--- a/src/server/routers/tools/__test__/search.test.ts
+++ b/src/server/routers/tools/__test__/search.test.ts
@@ -99,7 +99,9 @@ describe('searchRouter', () => {
 
       const result = await caller.query({
         query: 'test query',
-        searchEngine: ['google'],
+        optionalParams: {
+          searchEngines: ['google'],
+        },
       });
 
       expect(result).toEqual(mockSearchResult);
diff --git a/src/server/routers/tools/search.ts b/src/server/routers/tools/search.ts
index 3d5f5aeaf1316..ad2fa801b6152 100644
--- a/src/server/routers/tools/search.ts
+++ b/src/server/routers/tools/search.ts
@@ -43,9 +43,11 @@ export const searchRouter = router({
   query: searchProcedure
     .input(
       z.object({
+        optionalParams: z.object({
+          searchEngines: z.array(z.string()).optional(),
+          searchTimeRange: z.string().optional(),
+        }).optional(),
         query: z.string(),
-        searchEngine: z.array(z.string()).optional(),
-        searchTimeRange: z.string().optional(),
       }),
     )
     .query(async ({ input }) => {
@@ -56,7 +58,10 @@ export const searchRouter = router({
       const client = new SearXNGClient(toolsEnv.SEARXNG_URL);
 
       try {
-        return await client.search(input.query, input.searchEngine, input.searchTimeRange);
+        return await client.search(input.query, {
+          engines: input.optionalParams?.searchEngines,
+          time_range: input.optionalParams?.searchTimeRange,
+        });
       } catch (e) {
         console.error(e);
 
diff --git a/src/services/search.ts b/src/services/search.ts
index 50c404ca4f14d..2e069c1df01d9 100644
--- a/src/services/search.ts
+++ b/src/services/search.ts
@@ -1,8 +1,9 @@
 import { toolsClient } from '@/libs/trpc/client';
+import { SearchQuery } from '@/types/tool/search';
 
 class SearchService {
-  search(query: string, searchEngine?: string[], searchTimeRange?: string) {
-    return toolsClient.search.query.query({ query, searchEngine, searchTimeRange });
+  search(parmas: SearchQuery) {
+    return toolsClient.search.query.query(parmas);
   }
 
   crawlPage(url: string) {
diff --git a/src/store/chat/slices/builtinTool/actions/searXNG.test.ts b/src/store/chat/slices/builtinTool/actions/searXNG.test.ts
index 22ae559fdd6fd..e01aa252fefaa 100644
--- a/src/store/chat/slices/builtinTool/actions/searXNG.test.ts
+++ b/src/store/chat/slices/builtinTool/actions/searXNG.test.ts
@@ -73,7 +73,9 @@ describe('searXNG actions', () => {
       const messageId = 'test-message-id';
       const query: SearchQuery = {
         query: 'test query',
-        searchEngines: ['google'],
+        optionalParams: {
+          searchEngines: ['google'],
+        },
       };
 
       await act(async () => {
@@ -88,7 +90,12 @@ describe('searXNG actions', () => {
         },
       ];
 
-      expect(searchService.search).toHaveBeenCalledWith('test query', ['google'], undefined);
+      expect( searchService.search ).toHaveBeenCalledWith({
+        "optionalParams": {
+          "searchEngines": [ 'google' ]
+        },
+        "query": "test query",
+      });
       expect(result.current.searchLoading[messageId]).toBe(false);
       expect(result.current.internal_updateMessageContent).toHaveBeenCalledWith(
         messageId,
@@ -141,9 +148,11 @@ describe('searXNG actions', () => {
 
       const messageId = 'test-message-id';
       const query: SearchQuery = {
+        optionalParams: {
+          searchEngines: ['custom-engine'],
+          searchTimeRange: 'year',
+        },
         query: 'test query',
-        searchEngines: ['custom-engine'],
-        searchTimeRange: 'year',
       };
 
       await act(async () => {
@@ -151,11 +160,19 @@ describe('searXNG actions', () => {
       });
 
       expect(searchService.search).toHaveBeenCalledTimes(2);
-      expect(searchService.search).toHaveBeenNthCalledWith(1, 'test query', ['custom-engine'], 'year');
-      expect(searchService.search).toHaveBeenNthCalledWith(2, 'test query');
+      expect(searchService.search).toHaveBeenNthCalledWith(1, {
+        "optionalParams": {
+          "searchEngines": [ 'custom-engine' ],
+          "searchTimeRange": "year",
+        },
+        "query": "test query",
+      });
+      expect(searchService.search).toHaveBeenNthCalledWith(2, {
+        "query": "test query",
+      });
       expect(result.current.updatePluginArguments).toHaveBeenCalledWith(messageId, {
+        optionalParams: undefined,
         query: 'test query',
-        searchEngines: undefined,
       });
     });
 
diff --git a/src/store/chat/slices/builtinTool/actions/searXNG.ts b/src/store/chat/slices/builtinTool/actions/searXNG.ts
index 162ef6bfdf933..2db8599d8d508 100644
--- a/src/store/chat/slices/builtinTool/actions/searXNG.ts
+++ b/src/store/chat/slices/builtinTool/actions/searXNG.ts
@@ -141,12 +141,12 @@ export const searchSlice: StateCreator<
     get().toggleSearchLoading(id, true);
     let data: SearchResponse | undefined;
     try {
-      data = await searchService.search(params.query, params.searchEngines, params.searchTimeRange);
+      data = await searchService.search(params);
 
       // 如果没有搜索到结果，那么尝试使用默认的搜索引擎再搜一次
-      if (data?.results.length === 0 && (params.searchEngines && params.searchEngines?.length > 0 || params.searchTimeRange)) {
-        data = await searchService.search(params.query);
-        get().updatePluginArguments(id, { ...params, searchEngines: undefined, searchTimeRange: undefined });
+      if (data?.results.length === 0 && (params.optionalParams?.searchEngines && params.optionalParams?.searchEngines?.length > 0 || params.optionalParams?.searchTimeRange)) {
+        data = await searchService.search({ query: params.query });
+        get().updatePluginArguments(id, { ...params, optionalParams: undefined });
       }
 
       await get().updatePluginState(id, data);
diff --git a/src/tools/web-browsing/Portal/Search/index.tsx b/src/tools/web-browsing/Portal/Search/index.tsx
index aee6ad968cdb0..5c2f3b37e2cdc 100644
--- a/src/tools/web-browsing/Portal/Search/index.tsx
+++ b/src/tools/web-browsing/Portal/Search/index.tsx
@@ -19,7 +19,7 @@ interface InspectorUIProps {
 
 const Inspector = memo<InspectorUIProps>(({ query: args, messageId, response }) => {
   const engines = uniq((response.results || []).map((result) => result.engine));
-  const defaultEngines = engines.length > 0 ? engines : args.searchEngines || [];
+  const defaultEngines = engines.length > 0 ? engines : args.optionalParams?.searchEngines || [];
   const loading = useChatStore(chatToolSelectors.isSearXNGSearching(messageId));
 
   if (loading) {
diff --git a/src/tools/web-browsing/Render/Search/SearchQuery/index.tsx b/src/tools/web-browsing/Render/Search/SearchQuery/index.tsx
index e55ab51a3525a..a8742552fcaad 100644
--- a/src/tools/web-browsing/Render/Search/SearchQuery/index.tsx
+++ b/src/tools/web-browsing/Render/Search/SearchQuery/index.tsx
@@ -29,7 +29,7 @@ const SearchQueryView = memo<SearchQueryViewProps>(
     const { t } = useTranslation('common');
 
     const engines = uniq(searchResults.map((result) => result.engine));
-    const defaultEngines = engines.length > 0 ? engines : args.searchEngines || [];
+    const defaultEngines = engines.length > 0 ? engines : args.optionalParams?.searchEngines || [];
 
     return !pluginState ? (
       <Flexbox align={'center'} distribution={'space-between'} height={32} horizontal>
diff --git a/src/tools/web-browsing/Render/Search/SearchResult/index.tsx b/src/tools/web-browsing/Render/Search/SearchResult/index.tsx
index 2157afecde1d3..3900823c62bbd 100644
--- a/src/tools/web-browsing/Render/Search/SearchResult/index.tsx
+++ b/src/tools/web-browsing/Render/Search/SearchResult/index.tsx
@@ -32,7 +32,7 @@ const SearchResult = memo<SearchResultProps>(
     const { t } = useTranslation(['tool', 'common']);
 
     const engines = uniq(searchResults.map((result) => result.engine));
-    const defaultEngines = engines.length > 0 ? engines : args.searchEngines || [];
+    const defaultEngines = engines.length > 0 ? engines : args.optionalParams?.searchEngines || [];
     const isMobile = useIsMobile();
 
     if (loading || !pluginState)
diff --git a/src/tools/web-browsing/components/SearchBar.tsx b/src/tools/web-browsing/components/SearchBar.tsx
index 0b893ed9f97ff..849df2063e594 100644
--- a/src/tools/web-browsing/components/SearchBar.tsx
+++ b/src/tools/web-browsing/components/SearchBar.tsx
@@ -45,9 +45,11 @@ const SearchBar = memo<SearchBarProps>(
 
     const updateAndSearch = async () => {
       const data: SearchQuery = {
+        optionalParams: {
+          searchEngines: engines,
+          searchTimeRange: time_range,
+        },
         query,
-        searchEngines: engines,
-        searchTimeRange: time_range,
       };
       onSearch?.(data);
       await reSearchWithSearXNG(messageId, data, { aiSummary });
diff --git a/src/tools/web-browsing/index.ts b/src/tools/web-browsing/index.ts
index 78f2b7fe1ebf3..5111470c9e7cc 100644
--- a/src/tools/web-browsing/index.ts
+++ b/src/tools/web-browsing/index.ts
@@ -18,48 +18,48 @@ export const WebBrowsingManifest: BuiltinToolManifest = {
       name: WebBrowsingApiName.searchWithSearXNG,
       parameters: {
         properties: {
+          optionalParams: {
+            description: "The optional params you can set:",
+            properties: {
+              searchEngines: {
+                description: 'The search engine you can use:',
+                items: {
+                  enum: [
+                    'google',
+                    'bilibili',
+                    'bing',
+                    'duckduckgo',
+                    'npm',
+                    'pypi',
+                    'github',
+                    'arxiv',
+                    'google scholar',
+                    'z-library',
+                    'reddit',
+                    'imdb',
+                    'brave',
+                    'wikipedia',
+                    'pinterest',
+                    'unsplash',
+                    'vimeo',
+                    'youtube',
+                  ],
+                  type: 'string',
+                },
+                type: 'array',
+              },
+              searchTimeRange: {
+                description: "The time range you can set:",
+                enum: ['anytime', 'day', 'week', 'month', 'year'],
+                type: 'string',
+              },
+              type: 'object',
+            },
+          },
           query: {
             description: 'The search query',
             type: 'string',
           },
-          searchEngines: {
-            description: 'The search engine you can use:',
-            items: {
-              enum: [
-                'google',
-                'bilibili',
-                'bing',
-                'duckduckgo',
-                'npm',
-                'pypi',
-                'github',
-                'arxiv',
-                'google scholar',
-                'z-library',
-                'reddit',
-                'imdb',
-                'brave',
-                'wikipedia',
-                'pinterest',
-                'unsplash',
-                'vimeo',
-                'youtube',
-              ],
-              type: 'string',
-            },
-            type: 'array',
-          },
-          searchTimeRange: {
-            description: "The time range you can set:",
-            enum: [
-              'anytime',
-              'day',
-              'week',
-              'month',
-              'year',
-            ],
-            type: 'string'
-          },
         },
         required: ['query'],
         type: 'object',
diff --git a/src/types/tool/search.ts b/src/types/tool/search.ts
index bfda96bc748ef..4e4fccb4f0d7f 100644
--- a/src/types/tool/search.ts
+++ b/src/types/tool/search.ts
@@ -1,7 +1,9 @@
 export interface SearchQuery {
+  optionalParams?: {
+    searchEngines?: string[];
+    searchTimeRange?: string;
+  }
   query: string;
-  searchEngines?: string[];
-  searchTimeRange?: string;
 }
 
 export const SEARCH_SEARXNG_NOT_CONFIG = 'SearXNG is not configured';
