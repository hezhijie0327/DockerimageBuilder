diff --git a/src/config/aiModels/minimax.ts b/src/config/aiModels/minimax.ts
index 7764db0a7879d..d9e816663f604 100644
--- a/src/config/aiModels/minimax.ts
+++ b/src/config/aiModels/minimax.ts
@@ -1,4 +1,4 @@
-import { AIChatModelCard } from '@/types/aiModel';
+import { AIChatModelCard, AIImageModelCard } from '@/types/aiModel';
 
 const minimaxChatModels: AIChatModelCard[] = [
   {
@@ -51,6 +51,51 @@ const minimaxChatModels: AIChatModelCard[] = [
   },
 ];
 
-export const allModels = [...minimaxChatModels];
+const minimaxImageModels: AIImageModelCard[] = [
+  {
+    description:
+      '全新图像生成模型，画面表现细腻，支持文生图、图生图',
+    displayName: 'Image 01',
+    enabled: true,
+    id: 'image-01',
+    parameters: {
+      aspectRatio: {
+        default: '1:1',
+        enum: ['1:1', '16:9', '4:3', '3:2', '2:3', '3:4', '9:16', '21:9'],
+      },
+      height: { default: 1024, max: 2048, min: 512, step: 8 },
+      imageUrl: { default: null },
+      prompt: {
+        default: '',
+      },
+      width: { default: 1024, max: 2048, min: 512, step: 8 },
+    },
+    releasedAt: '2025-02-28',
+    type: 'image',
+  },
+  {
+    description:
+      '图像生成模型，画面表现细腻，支持文生图并进行画风设置',
+    displayName: 'Image 01 Live',
+    enabled: true,
+    id: 'image-01-live',
+    parameters: {
+      aspectRatio: {
+        default: '1:1',
+        enum: ['1:1', '16:9', '4:3', '3:2', '2:3', '3:4', '9:16', '21:9'],
+      },
+      height: { default: 1024, max: 2048, min: 512, step: 8 },
+      imageUrl: { default: null },
+      prompt: {
+        default: '',
+      },
+      width: { default: 1024, max: 2048, min: 512, step: 8 },
+    },
+    releasedAt: '2025-02-28',
+    type: 'image',
+  },
+];
+
+export const allModels = [...minimaxChatModels, ...minimaxImageModels];
 
 export default allModels;
diff --git a/src/libs/model-runtime/minimax/createImage.ts b/src/libs/model-runtime/minimax/createImage.ts
new file mode 100644
index 0000000000000..64420e0b2cbde
--- /dev/null
+++ b/src/libs/model-runtime/minimax/createImage.ts
@@ -0,0 +1,175 @@
+import createDebug from 'debug';
+
+import { CreateImagePayload, CreateImageResponse } from '../types/image';
+import { AgentRuntimeError } from '../utils/createError';
+import { CreateImageOptions } from '../utils/openaiCompatibleFactory';
+
+const log = createDebug('lobe-image:minimax');
+
+interface MiniMaxImageResponse {
+  base_resp: {
+    status_code: number;
+    status_msg: string;
+  };
+  data: {
+    image_urls: string[];
+  };
+  id: string;
+  metadata: {
+    failed_count: string;
+    success_count: string;
+  };
+}
+
+/**
+ * Convert standard image parameters to MiniMax format
+ */
+function convertImageParams(params: CreateImagePayload['params']) {
+  const { height, seed, width } = params;
+
+  // Prepare the base parameters
+  const miniMaxParams: any = {
+    n: 1, // MiniMax supports 1-9 images
+    prompt: params.prompt,
+    // prompt_optimizer: true, // Enable prompt optimization by default
+    // response_format: 'url',
+  };
+
+  // Add seed if provided
+  if (seed !== undefined) {
+    miniMaxParams.seed = seed;
+  }
+
+  // Handle width/height vs aspect_ratio
+  if (width && height) {
+    // Ensure dimensions are multiples of 8 and within valid range
+    const normalizeSize = (size: number) => {
+      const clamped = Math.max(512, Math.min(2048, size));
+      return Math.round(clamped / 8) * 8; // Round to nearest multiple of 8
+    };
+    
+    const normalizedWidth = normalizeSize(width);
+    const normalizedHeight = normalizeSize(height);
+    
+    // Check if total pixels exceed 2M (recommended limit)
+    const totalPixels = normalizedWidth * normalizedHeight;
+    if (totalPixels > 2_000_000) {
+      log('Warning: Image resolution (%dx%d = %d pixels) exceeds recommended 2M pixel limit', 
+          normalizedWidth, normalizedHeight, totalPixels);
+    }
+    
+    miniMaxParams.width = normalizedWidth;
+    miniMaxParams.height = normalizedHeight;
+  } else {
+    // Use aspect_ratio if width/height not specified
+    let aspect_ratio = '1:1'; // default square
+    if (width && height) {
+      const gcd = (a: number, b: number): number => b === 0 ? a : gcd(b, a % b);
+      const divisor = gcd(width, height);
+      aspect_ratio = `${width / divisor}:${height / divisor}`;
+      
+      // Map to supported aspect ratios
+      const supportedRatios = ['1:1', '16:9', '4:3', '3:2', '2:3', '3:4', '9:16', '21:9'];
+      if (!supportedRatios.includes(aspect_ratio)) {
+        aspect_ratio = '1:1'; // fallback to square
+        log('Unsupported aspect ratio %s, falling back to 1:1', aspect_ratio);
+      }
+    }
+    miniMaxParams.aspect_ratio = aspect_ratio;
+  }
+  
+  return miniMaxParams;
+}
+
+/**
+ * Create image using MiniMax API
+ */
+export async function createMiniMaxImage(
+  payload: CreateImagePayload,
+  options: CreateImageOptions,
+): Promise<CreateImageResponse> {
+  const { apiKey, provider } = options;
+  const { model, params } = payload;
+  
+  try {
+    const endpoint = 'https://api.minimaxi.com/v1/image_generation';
+    
+    // Convert parameters to MiniMax format
+    const miniMaxParams = convertImageParams(params);
+    
+    log('Creating image with MiniMax model: %s', model);
+    log('Parameters: %O', miniMaxParams);
+
+    const requestBody = {
+      model: model || 'image-01', // Default to image-01 if no model specified
+      ...miniMaxParams,
+    };
+
+    const response = await fetch(endpoint, {
+      body: JSON.stringify(requestBody),
+      headers: {
+        'Authorization': `Bearer ${apiKey}`,
+        'Content-Type': 'application/json',
+      },
+      method: 'POST',
+    });
+
+    if (!response.ok) {
+      let errorData;
+      try {
+        errorData = await response.json();
+      } catch {
+        // Failed to parse JSON error response
+      }
+      
+      // Check if it's a MiniMax error response format
+      const errorMessage = errorData?.base_resp?.status_msg || 
+                          errorData?.error?.message || 
+                          errorData?.message || 
+                          response.statusText;
+      
+      throw new Error(
+        `MiniMax API error (${response.status}): ${errorMessage}`
+      );
+    }
+
+    const data: MiniMaxImageResponse = await response.json();
+    
+    log('Image generation response: %O', data);
+
+    // Check API response status
+    if (data.base_resp.status_code !== 0) {
+      throw new Error(`MiniMax API error: ${data.base_resp.status_msg}`);
+    }
+
+    // Check if we have valid image data
+    if (!data.data?.image_urls || data.data.image_urls.length === 0) {
+      throw new Error('No images generated in response');
+    }
+
+    // Log generation statistics
+    const successCount = parseInt(data.metadata.success_count);
+    const failedCount = parseInt(data.metadata.failed_count);
+    log('Image generation completed: %d successful, %d failed', successCount, failedCount);
+
+    // Return the first generated image URL
+    const imageUrl = data.data.image_urls[0];
+    
+    if (!imageUrl) {
+      throw new Error('No valid image URL in response');
+    }
+
+    log('Image generated successfully: %s', imageUrl);
+
+    return {  imageUrl };
+
+  } catch (error) {
+    log('Error in createMiniMaxImage: %O', error);
+
+    throw AgentRuntimeError.createImage({
+      error: error as any,
+      errorType: 'ProviderBizError',
+      provider,
+    });
+  }
+}
diff --git a/src/libs/model-runtime/minimax/index.ts b/src/libs/model-runtime/minimax/index.ts
index eb60b5bbecb64..12e73be20a107 100644
--- a/src/libs/model-runtime/minimax/index.ts
+++ b/src/libs/model-runtime/minimax/index.ts
@@ -2,6 +2,7 @@ import minimaxChatModels from '@/config/aiModels/minimax';
 
 import { ModelProvider } from '../types';
 import { createOpenAICompatibleRuntime } from '../utils/openaiCompatibleFactory';
+import { createMiniMaxImage } from './createImage';
 
 export const getMinimaxMaxOutputs = (modelId: string): number | undefined => {
   const model = minimaxChatModels.find((model) => model.id === modelId);
@@ -34,6 +35,7 @@ export const LobeMinimaxAI = createOpenAICompatibleRuntime({
       } as any;
     },
   },
+  createImage: createMiniMaxImage,
   debug: {
     chatCompletion: () => process.env.DEBUG_MINIMAX_CHAT_COMPLETION === '1',
   },
